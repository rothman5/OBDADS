import subprocess
import time
from pathlib import Path

import serial

IPC_PORT = "/dev/ttyRPMSG0"
FW_SHELL = Path(__file__).parent.resolve() / "fw_cortex_m4.sh"
DELAY_MS = 1000
BATCH_SIZE = 50


buffer: list[list[str]] = []


def start_firmware() -> None:
    """Start the Cortex M4 firmware using the shell script generated by STM32CubeIDE."""
    if not FW_SHELL.exists():
        print("Error: Cortex M4 firmware control script not found!")
        return
    try:
        subprocess.run([FW_SHELL, "start"], check=True)
    except subprocess.CalledProcessError as e:
        print(f"Cortex M4 firmware shell startup script failed to execute: {e}")
    else:
        print("Cortex M4 firmware shell startup script executed successfully!")


def stop_firmware() -> None:
    """Stop the Cortex M4 firmware using the shell script generated by STM32CubeIDE."""
    if not FW_SHELL.exists():
        print("Error: Cortex M4 firmware control script not found!")
        return
    try:
        subprocess.run([FW_SHELL, "stop"], check=True)
    except subprocess.CalledProcessError as e:
        print(f"Cortex M4 firmware shell shutdown script failed to execute: {e}")
    else:
        print("Cortex M4 firmware shell shutdown script executed successfully!")


def listen_for_ipc() -> None:
    """Listen for IPC messages from the Cortex M4 firmware and save them into the database."""
    while True:
        try:
            ipc = serial.Serial(port=IPC_PORT, baudrate=115200, timeout=1)
        except serial.SerialException as e:
            print(f"Failed to begin listening for IPC messages: {e}")
            time.sleep(DELAY_MS / 1000)
        else:
            print(f"Now listening for IPC messages on {ipc.port}...")
            while True:
                try:
                    message = ipc.readline().decode("utf-8").strip()
                except serial.SerialException as e:
                    # Close the serial connection and try to re-open it
                    print(f"Failed to read IPC message: {e}")
                    ipc.close()
                    break
                else:
                    if message:
                        components = message.split(",")
                        if len(components) < 1:
                            print("Error: Invalid IPC message received!")
                            continue

                        buffer.append(components)

                        if len(buffer) >= BATCH_SIZE:
                            # TODO: Add to database here
                            print(f"Batch size: {len(buffer)}")
                            buffer.clear()


def main() -> None:
    start_firmware()
    listen_for_ipc()


if __name__ == "__main__":
    main()
