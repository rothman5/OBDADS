
OBDCommandTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c14  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003da0  08003da0  00004da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003de8  08003de8  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003de8  08003de8  00004de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003df0  08003df0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003df0  08003df0  00004df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003df4  08003df4  00004df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003df8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  2000000c  08003e04  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08003e04  000052cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c4d1  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002071  00000000  00000000  0001150d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  00013580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000797  00000000  00000000  00013f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f71  00000000  00000000  00014717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d004  00000000  00000000  0002d688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b194  00000000  00000000  0003a68c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d5820  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026dc  00000000  00000000  000d5864  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000d7f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003d88 	.word	0x08003d88

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003d88 	.word	0x08003d88

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b96a 	b.w	80004b8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	460c      	mov	r4, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14e      	bne.n	80002a6 <__udivmoddi4+0xaa>
 8000208:	4694      	mov	ip, r2
 800020a:	458c      	cmp	ip, r1
 800020c:	4686      	mov	lr, r0
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	d962      	bls.n	80002da <__udivmoddi4+0xde>
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0320 	rsb	r3, r2, #32
 800021a:	4091      	lsls	r1, r2
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	fa0c fc02 	lsl.w	ip, ip, r2
 8000224:	4319      	orrs	r1, r3
 8000226:	fa00 fe02 	lsl.w	lr, r0, r2
 800022a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022e:	fa1f f68c 	uxth.w	r6, ip
 8000232:	fbb1 f4f7 	udiv	r4, r1, r7
 8000236:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023a:	fb07 1114 	mls	r1, r7, r4, r1
 800023e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000242:	fb04 f106 	mul.w	r1, r4, r6
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000252:	f080 8112 	bcs.w	800047a <__udivmoddi4+0x27e>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 810f 	bls.w	800047a <__udivmoddi4+0x27e>
 800025c:	3c02      	subs	r4, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a59      	subs	r1, r3, r1
 8000262:	fa1f f38e 	uxth.w	r3, lr
 8000266:	fbb1 f0f7 	udiv	r0, r1, r7
 800026a:	fb07 1110 	mls	r1, r7, r0, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb00 f606 	mul.w	r6, r0, r6
 8000276:	429e      	cmp	r6, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x94>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000282:	f080 80fc 	bcs.w	800047e <__udivmoddi4+0x282>
 8000286:	429e      	cmp	r6, r3
 8000288:	f240 80f9 	bls.w	800047e <__udivmoddi4+0x282>
 800028c:	4463      	add	r3, ip
 800028e:	3802      	subs	r0, #2
 8000290:	1b9b      	subs	r3, r3, r6
 8000292:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa6>
 800029a:	40d3      	lsrs	r3, r2
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xba>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb4>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x150>
 80002be:	42a3      	cmp	r3, r4
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xcc>
 80002c2:	4290      	cmp	r0, r2
 80002c4:	f0c0 80f0 	bcc.w	80004a8 <__udivmoddi4+0x2ac>
 80002c8:	1a86      	subs	r6, r0, r2
 80002ca:	eb64 0303 	sbc.w	r3, r4, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	2d00      	cmp	r5, #0
 80002d2:	d0e6      	beq.n	80002a2 <__udivmoddi4+0xa6>
 80002d4:	e9c5 6300 	strd	r6, r3, [r5]
 80002d8:	e7e3      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002da:	2a00      	cmp	r2, #0
 80002dc:	f040 8090 	bne.w	8000400 <__udivmoddi4+0x204>
 80002e0:	eba1 040c 	sub.w	r4, r1, ip
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	fa1f f78c 	uxth.w	r7, ip
 80002ec:	2101      	movs	r1, #1
 80002ee:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f6:	fb08 4416 	mls	r4, r8, r6, r4
 80002fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fe:	fb07 f006 	mul.w	r0, r7, r6
 8000302:	4298      	cmp	r0, r3
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0x11c>
 8000306:	eb1c 0303 	adds.w	r3, ip, r3
 800030a:	f106 34ff 	add.w	r4, r6, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0x11a>
 8000310:	4298      	cmp	r0, r3
 8000312:	f200 80cd 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 8000316:	4626      	mov	r6, r4
 8000318:	1a1c      	subs	r4, r3, r0
 800031a:	fa1f f38e 	uxth.w	r3, lr
 800031e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000322:	fb08 4410 	mls	r4, r8, r0, r4
 8000326:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032a:	fb00 f707 	mul.w	r7, r0, r7
 800032e:	429f      	cmp	r7, r3
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x148>
 8000332:	eb1c 0303 	adds.w	r3, ip, r3
 8000336:	f100 34ff 	add.w	r4, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x146>
 800033c:	429f      	cmp	r7, r3
 800033e:	f200 80b0 	bhi.w	80004a2 <__udivmoddi4+0x2a6>
 8000342:	4620      	mov	r0, r4
 8000344:	1bdb      	subs	r3, r3, r7
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x9c>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa20 fc06 	lsr.w	ip, r0, r6
 800035c:	fa04 f301 	lsl.w	r3, r4, r1
 8000360:	ea43 030c 	orr.w	r3, r3, ip
 8000364:	40f4      	lsrs	r4, r6
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	0c38      	lsrs	r0, r7, #16
 800036c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000370:	fbb4 fef0 	udiv	lr, r4, r0
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fb00 441e 	mls	r4, r0, lr, r4
 800037c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000380:	fb0e f90c 	mul.w	r9, lr, ip
 8000384:	45a1      	cmp	r9, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x1a6>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000392:	f080 8084 	bcs.w	800049e <__udivmoddi4+0x2a2>
 8000396:	45a1      	cmp	r9, r4
 8000398:	f240 8081 	bls.w	800049e <__udivmoddi4+0x2a2>
 800039c:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a0:	443c      	add	r4, r7
 80003a2:	eba4 0409 	sub.w	r4, r4, r9
 80003a6:	fa1f f983 	uxth.w	r9, r3
 80003aa:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ae:	fb00 4413 	mls	r4, r0, r3, r4
 80003b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ba:	45a4      	cmp	ip, r4
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x1d2>
 80003be:	193c      	adds	r4, r7, r4
 80003c0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c4:	d267      	bcs.n	8000496 <__udivmoddi4+0x29a>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d965      	bls.n	8000496 <__udivmoddi4+0x29a>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d2:	fba0 9302 	umull	r9, r3, r0, r2
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	429c      	cmp	r4, r3
 80003dc:	46ce      	mov	lr, r9
 80003de:	469c      	mov	ip, r3
 80003e0:	d351      	bcc.n	8000486 <__udivmoddi4+0x28a>
 80003e2:	d04e      	beq.n	8000482 <__udivmoddi4+0x286>
 80003e4:	b155      	cbz	r5, 80003fc <__udivmoddi4+0x200>
 80003e6:	ebb8 030e 	subs.w	r3, r8, lr
 80003ea:	eb64 040c 	sbc.w	r4, r4, ip
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	40cb      	lsrs	r3, r1
 80003f4:	431e      	orrs	r6, r3
 80003f6:	40cc      	lsrs	r4, r1
 80003f8:	e9c5 6400 	strd	r6, r4, [r5]
 80003fc:	2100      	movs	r1, #0
 80003fe:	e750      	b.n	80002a2 <__udivmoddi4+0xa6>
 8000400:	f1c2 0320 	rsb	r3, r2, #32
 8000404:	fa20 f103 	lsr.w	r1, r0, r3
 8000408:	fa0c fc02 	lsl.w	ip, ip, r2
 800040c:	fa24 f303 	lsr.w	r3, r4, r3
 8000410:	4094      	lsls	r4, r2
 8000412:	430c      	orrs	r4, r1
 8000414:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000418:	fa00 fe02 	lsl.w	lr, r0, r2
 800041c:	fa1f f78c 	uxth.w	r7, ip
 8000420:	fbb3 f0f8 	udiv	r0, r3, r8
 8000424:	fb08 3110 	mls	r1, r8, r0, r3
 8000428:	0c23      	lsrs	r3, r4, #16
 800042a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042e:	fb00 f107 	mul.w	r1, r0, r7
 8000432:	4299      	cmp	r1, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x24c>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 36ff 	add.w	r6, r0, #4294967295
 800043e:	d22c      	bcs.n	800049a <__udivmoddi4+0x29e>
 8000440:	4299      	cmp	r1, r3
 8000442:	d92a      	bls.n	800049a <__udivmoddi4+0x29e>
 8000444:	3802      	subs	r0, #2
 8000446:	4463      	add	r3, ip
 8000448:	1a5b      	subs	r3, r3, r1
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000450:	fb08 3311 	mls	r3, r8, r1, r3
 8000454:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000458:	fb01 f307 	mul.w	r3, r1, r7
 800045c:	42a3      	cmp	r3, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x276>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f101 36ff 	add.w	r6, r1, #4294967295
 8000468:	d213      	bcs.n	8000492 <__udivmoddi4+0x296>
 800046a:	42a3      	cmp	r3, r4
 800046c:	d911      	bls.n	8000492 <__udivmoddi4+0x296>
 800046e:	3902      	subs	r1, #2
 8000470:	4464      	add	r4, ip
 8000472:	1ae4      	subs	r4, r4, r3
 8000474:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000478:	e739      	b.n	80002ee <__udivmoddi4+0xf2>
 800047a:	4604      	mov	r4, r0
 800047c:	e6f0      	b.n	8000260 <__udivmoddi4+0x64>
 800047e:	4608      	mov	r0, r1
 8000480:	e706      	b.n	8000290 <__udivmoddi4+0x94>
 8000482:	45c8      	cmp	r8, r9
 8000484:	d2ae      	bcs.n	80003e4 <__udivmoddi4+0x1e8>
 8000486:	ebb9 0e02 	subs.w	lr, r9, r2
 800048a:	eb63 0c07 	sbc.w	ip, r3, r7
 800048e:	3801      	subs	r0, #1
 8000490:	e7a8      	b.n	80003e4 <__udivmoddi4+0x1e8>
 8000492:	4631      	mov	r1, r6
 8000494:	e7ed      	b.n	8000472 <__udivmoddi4+0x276>
 8000496:	4603      	mov	r3, r0
 8000498:	e799      	b.n	80003ce <__udivmoddi4+0x1d2>
 800049a:	4630      	mov	r0, r6
 800049c:	e7d4      	b.n	8000448 <__udivmoddi4+0x24c>
 800049e:	46d6      	mov	lr, sl
 80004a0:	e77f      	b.n	80003a2 <__udivmoddi4+0x1a6>
 80004a2:	4463      	add	r3, ip
 80004a4:	3802      	subs	r0, #2
 80004a6:	e74d      	b.n	8000344 <__udivmoddi4+0x148>
 80004a8:	4606      	mov	r6, r0
 80004aa:	4623      	mov	r3, r4
 80004ac:	4608      	mov	r0, r1
 80004ae:	e70f      	b.n	80002d0 <__udivmoddi4+0xd4>
 80004b0:	3e02      	subs	r6, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	e730      	b.n	8000318 <__udivmoddi4+0x11c>
 80004b6:	bf00      	nop

080004b8 <__aeabi_idiv0>:
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop

080004bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004c2:	4b10      	ldr	r3, [pc, #64]	@ (8000504 <MX_DMA_Init+0x48>)
 80004c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004c6:	4a0f      	ldr	r2, [pc, #60]	@ (8000504 <MX_DMA_Init+0x48>)
 80004c8:	f043 0301 	orr.w	r3, r3, #1
 80004cc:	6493      	str	r3, [r2, #72]	@ 0x48
 80004ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000504 <MX_DMA_Init+0x48>)
 80004d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80004d2:	f003 0301 	and.w	r3, r3, #1
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80004da:	2200      	movs	r2, #0
 80004dc:	2100      	movs	r1, #0
 80004de:	200f      	movs	r0, #15
 80004e0:	f000 fcb3 	bl	8000e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80004e4:	200f      	movs	r0, #15
 80004e6:	f000 fccc 	bl	8000e82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2100      	movs	r1, #0
 80004ee:	2010      	movs	r0, #16
 80004f0:	f000 fcab 	bl	8000e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80004f4:	2010      	movs	r0, #16
 80004f6:	f000 fcc4 	bl	8000e82 <HAL_NVIC_EnableIRQ>

}
 80004fa:	bf00      	nop
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40021000 	.word	0x40021000

08000508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b088      	sub	sp, #32
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 030c 	add.w	r3, r7, #12
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051e:	4b1d      	ldr	r3, [pc, #116]	@ (8000594 <MX_GPIO_Init+0x8c>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000522:	4a1c      	ldr	r2, [pc, #112]	@ (8000594 <MX_GPIO_Init+0x8c>)
 8000524:	f043 0304 	orr.w	r3, r3, #4
 8000528:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800052a:	4b1a      	ldr	r3, [pc, #104]	@ (8000594 <MX_GPIO_Init+0x8c>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052e:	f003 0304 	and.w	r3, r3, #4
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	4b17      	ldr	r3, [pc, #92]	@ (8000594 <MX_GPIO_Init+0x8c>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053a:	4a16      	ldr	r2, [pc, #88]	@ (8000594 <MX_GPIO_Init+0x8c>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000542:	4b14      	ldr	r3, [pc, #80]	@ (8000594 <MX_GPIO_Init+0x8c>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800054e:	4b11      	ldr	r3, [pc, #68]	@ (8000594 <MX_GPIO_Init+0x8c>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000552:	4a10      	ldr	r2, [pc, #64]	@ (8000594 <MX_GPIO_Init+0x8c>)
 8000554:	f043 0302 	orr.w	r3, r3, #2
 8000558:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800055a:	4b0e      	ldr	r3, [pc, #56]	@ (8000594 <MX_GPIO_Init+0x8c>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800055e:	f003 0302 	and.w	r3, r3, #2
 8000562:	603b      	str	r3, [r7, #0]
 8000564:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	2108      	movs	r1, #8
 800056a:	480b      	ldr	r0, [pc, #44]	@ (8000598 <MX_GPIO_Init+0x90>)
 800056c:	f001 f88c 	bl	8001688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 8000570:	2308      	movs	r3, #8
 8000572:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000574:	2301      	movs	r3, #1
 8000576:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000578:	2300      	movs	r3, #0
 800057a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057c:	2300      	movs	r3, #0
 800057e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	4619      	mov	r1, r3
 8000586:	4804      	ldr	r0, [pc, #16]	@ (8000598 <MX_GPIO_Init+0x90>)
 8000588:	f000 ff0c 	bl	80013a4 <HAL_GPIO_Init>

}
 800058c:	bf00      	nop
 800058e:	3720      	adds	r7, #32
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40021000 	.word	0x40021000
 8000598:	48000400 	.word	0x48000400

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f000 fadf 	bl	8000b62 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f828 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f7ff ffae 	bl	8000508 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ac:	f7ff ff86 	bl	80004bc <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005b0:	f000 f942 	bl	8000838 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80005b4:	f000 f910 	bl	80007d8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart2, cmd_rx_buffer, 5U);
 80005b8:	2205      	movs	r2, #5
 80005ba:	490c      	ldr	r1, [pc, #48]	@ (80005ec <main+0x50>)
 80005bc:	480c      	ldr	r0, [pc, #48]	@ (80005f0 <main+0x54>)
 80005be:	f002 f9c1 	bl	8002944 <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80005c2:	2201      	movs	r2, #1
 80005c4:	2108      	movs	r1, #8
 80005c6:	480b      	ldr	r0, [pc, #44]	@ (80005f4 <main+0x58>)
 80005c8:	f001 f85e 	bl	8001688 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80005cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005d0:	f000 fb3c 	bl	8000c4c <HAL_Delay>
	  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80005d4:	2200      	movs	r2, #0
 80005d6:	2108      	movs	r1, #8
 80005d8:	4806      	ldr	r0, [pc, #24]	@ (80005f4 <main+0x58>)
 80005da:	f001 f855 	bl	8001688 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80005de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005e2:	f000 fb33 	bl	8000c4c <HAL_Delay>
	  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80005e6:	bf00      	nop
 80005e8:	e7eb      	b.n	80005c2 <main+0x26>
 80005ea:	bf00      	nop
 80005ec:	20000028 	.word	0x20000028
 80005f0:	200001b0 	.word	0x200001b0
 80005f4:	48000400 	.word	0x48000400

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b096      	sub	sp, #88	@ 0x58
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	2244      	movs	r2, #68	@ 0x44
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f003 fb92 	bl	8003d30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	463b      	mov	r3, r7
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800061a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800061e:	f001 f859 	bl	80016d4 <HAL_PWREx_ControlVoltageScaling>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000628:	f000 f835 	bl	8000696 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800062c:	2302      	movs	r3, #2
 800062e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000630:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000634:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000636:	2340      	movs	r3, #64	@ 0x40
 8000638:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063a:	2302      	movs	r3, #2
 800063c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800063e:	2302      	movs	r3, #2
 8000640:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000642:	2301      	movs	r3, #1
 8000644:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000646:	230a      	movs	r3, #10
 8000648:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800064a:	2302      	movs	r3, #2
 800064c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800064e:	2302      	movs	r3, #2
 8000650:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	4618      	mov	r0, r3
 8000658:	f001 f892 	bl	8001780 <HAL_RCC_OscConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000662:	f000 f818 	bl	8000696 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000666:	230f      	movs	r3, #15
 8000668:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066a:	2303      	movs	r3, #3
 800066c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800067a:	463b      	mov	r3, r7
 800067c:	2104      	movs	r1, #4
 800067e:	4618      	mov	r0, r3
 8000680:	f001 fce0 	bl	8002044 <HAL_RCC_ClockConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800068a:	f000 f804 	bl	8000696 <Error_Handler>
  }
}
 800068e:	bf00      	nop
 8000690:	3758      	adds	r7, #88	@ 0x58
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}

08000696 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000696:	b480      	push	{r7}
 8000698:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800069a:	b672      	cpsid	i
}
 800069c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800069e:	bf00      	nop
 80006a0:	e7fd      	b.n	800069e <Error_Handler+0x8>
	...

080006a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006aa:	4b12      	ldr	r3, [pc, #72]	@ (80006f4 <HAL_MspInit+0x50>)
 80006ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006ae:	4a11      	ldr	r2, [pc, #68]	@ (80006f4 <HAL_MspInit+0x50>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80006b6:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <HAL_MspInit+0x50>)
 80006b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c2:	4b0c      	ldr	r3, [pc, #48]	@ (80006f4 <HAL_MspInit+0x50>)
 80006c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006c6:	4a0b      	ldr	r2, [pc, #44]	@ (80006f4 <HAL_MspInit+0x50>)
 80006c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80006ce:	4b09      	ldr	r3, [pc, #36]	@ (80006f4 <HAL_MspInit+0x50>)
 80006d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	2100      	movs	r1, #0
 80006de:	2005      	movs	r0, #5
 80006e0:	f000 fbb3 	bl	8000e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80006e4:	2005      	movs	r0, #5
 80006e6:	f000 fbcc 	bl	8000e82 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ea:	bf00      	nop
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40021000 	.word	0x40021000

080006f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006fc:	bf00      	nop
 80006fe:	e7fd      	b.n	80006fc <NMI_Handler+0x4>

08000700 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <HardFault_Handler+0x4>

08000708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800070c:	bf00      	nop
 800070e:	e7fd      	b.n	800070c <MemManage_Handler+0x4>

08000710 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000714:	bf00      	nop
 8000716:	e7fd      	b.n	8000714 <BusFault_Handler+0x4>

08000718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800071c:	bf00      	nop
 800071e:	e7fd      	b.n	800071c <UsageFault_Handler+0x4>

08000720 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr

0800072e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr

0800074a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800074a:	b580      	push	{r7, lr}
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800074e:	f000 fa5d 	bl	8000c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}

08000756 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr

08000764 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000768:	4802      	ldr	r0, [pc, #8]	@ (8000774 <DMA1_Channel5_IRQHandler+0x10>)
 800076a:	f000 fd3c 	bl	80011e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000238 	.word	0x20000238

08000778 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800077c:	4802      	ldr	r0, [pc, #8]	@ (8000788 <DMA1_Channel6_IRQHandler+0x10>)
 800077e:	f000 fd32 	bl	80011e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000280 	.word	0x20000280

0800078c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000790:	4802      	ldr	r0, [pc, #8]	@ (800079c <USART1_IRQHandler+0x10>)
 8000792:	f002 f923 	bl	80029dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000128 	.word	0x20000128

080007a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80007a4:	4802      	ldr	r0, [pc, #8]	@ (80007b0 <USART2_IRQHandler+0x10>)
 80007a6:	f002 f919 	bl	80029dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200001b0 	.word	0x200001b0

080007b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007b8:	4b06      	ldr	r3, [pc, #24]	@ (80007d4 <SystemInit+0x20>)
 80007ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007be:	4a05      	ldr	r2, [pc, #20]	@ (80007d4 <SystemInit+0x20>)
 80007c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	e000ed00 	.word	0xe000ed00

080007d8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007dc:	4b14      	ldr	r3, [pc, #80]	@ (8000830 <MX_USART1_UART_Init+0x58>)
 80007de:	4a15      	ldr	r2, [pc, #84]	@ (8000834 <MX_USART1_UART_Init+0x5c>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007e2:	4b13      	ldr	r3, [pc, #76]	@ (8000830 <MX_USART1_UART_Init+0x58>)
 80007e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <MX_USART1_UART_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000830 <MX_USART1_UART_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <MX_USART1_UART_Init+0x58>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000830 <MX_USART1_UART_Init+0x58>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	@ (8000830 <MX_USART1_UART_Init+0x58>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b09      	ldr	r3, [pc, #36]	@ (8000830 <MX_USART1_UART_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800080e:	4b08      	ldr	r3, [pc, #32]	@ (8000830 <MX_USART1_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000814:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <MX_USART1_UART_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	@ (8000830 <MX_USART1_UART_Init+0x58>)
 800081c:	f001 ffba 	bl	8002794 <HAL_UART_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000826:	f7ff ff36 	bl	8000696 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000128 	.word	0x20000128
 8000834:	40013800 	.word	0x40013800

08000838 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800083c:	4b14      	ldr	r3, [pc, #80]	@ (8000890 <MX_USART2_UART_Init+0x58>)
 800083e:	4a15      	ldr	r2, [pc, #84]	@ (8000894 <MX_USART2_UART_Init+0x5c>)
 8000840:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000842:	4b13      	ldr	r3, [pc, #76]	@ (8000890 <MX_USART2_UART_Init+0x58>)
 8000844:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000848:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800084a:	4b11      	ldr	r3, [pc, #68]	@ (8000890 <MX_USART2_UART_Init+0x58>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000850:	4b0f      	ldr	r3, [pc, #60]	@ (8000890 <MX_USART2_UART_Init+0x58>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000856:	4b0e      	ldr	r3, [pc, #56]	@ (8000890 <MX_USART2_UART_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800085c:	4b0c      	ldr	r3, [pc, #48]	@ (8000890 <MX_USART2_UART_Init+0x58>)
 800085e:	220c      	movs	r2, #12
 8000860:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000862:	4b0b      	ldr	r3, [pc, #44]	@ (8000890 <MX_USART2_UART_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000868:	4b09      	ldr	r3, [pc, #36]	@ (8000890 <MX_USART2_UART_Init+0x58>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086e:	4b08      	ldr	r3, [pc, #32]	@ (8000890 <MX_USART2_UART_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000874:	4b06      	ldr	r3, [pc, #24]	@ (8000890 <MX_USART2_UART_Init+0x58>)
 8000876:	2200      	movs	r2, #0
 8000878:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800087a:	4805      	ldr	r0, [pc, #20]	@ (8000890 <MX_USART2_UART_Init+0x58>)
 800087c:	f001 ff8a 	bl	8002794 <HAL_UART_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000886:	f7ff ff06 	bl	8000696 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	200001b0 	.word	0x200001b0
 8000894:	40004400 	.word	0x40004400

08000898 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b098      	sub	sp, #96	@ 0x60
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008b0:	f107 0318 	add.w	r3, r7, #24
 80008b4:	2234      	movs	r2, #52	@ 0x34
 80008b6:	2100      	movs	r1, #0
 80008b8:	4618      	mov	r0, r3
 80008ba:	f003 fa39 	bl	8003d30 <memset>
  if(uartHandle->Instance==USART1)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a78      	ldr	r2, [pc, #480]	@ (8000aa4 <HAL_UART_MspInit+0x20c>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d169      	bne.n	800099c <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80008c8:	2301      	movs	r3, #1
 80008ca:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d0:	f107 0318 	add.w	r3, r7, #24
 80008d4:	4618      	mov	r0, r3
 80008d6:	f001 fdd7 	bl	8002488 <HAL_RCCEx_PeriphCLKConfig>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008e0:	f7ff fed9 	bl	8000696 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008e4:	4b70      	ldr	r3, [pc, #448]	@ (8000aa8 <HAL_UART_MspInit+0x210>)
 80008e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008e8:	4a6f      	ldr	r2, [pc, #444]	@ (8000aa8 <HAL_UART_MspInit+0x210>)
 80008ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008ee:	6613      	str	r3, [r2, #96]	@ 0x60
 80008f0:	4b6d      	ldr	r3, [pc, #436]	@ (8000aa8 <HAL_UART_MspInit+0x210>)
 80008f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008f8:	617b      	str	r3, [r7, #20]
 80008fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fc:	4b6a      	ldr	r3, [pc, #424]	@ (8000aa8 <HAL_UART_MspInit+0x210>)
 80008fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000900:	4a69      	ldr	r2, [pc, #420]	@ (8000aa8 <HAL_UART_MspInit+0x210>)
 8000902:	f043 0301 	orr.w	r3, r3, #1
 8000906:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000908:	4b67      	ldr	r3, [pc, #412]	@ (8000aa8 <HAL_UART_MspInit+0x210>)
 800090a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090c:	f003 0301 	and.w	r3, r3, #1
 8000910:	613b      	str	r3, [r7, #16]
 8000912:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = OBD_TX_Pin|OBD_RX_Pin;
 8000914:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000918:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000922:	2303      	movs	r3, #3
 8000924:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000926:	2307      	movs	r3, #7
 8000928:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800092e:	4619      	mov	r1, r3
 8000930:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000934:	f000 fd36 	bl	80013a4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000938:	4b5c      	ldr	r3, [pc, #368]	@ (8000aac <HAL_UART_MspInit+0x214>)
 800093a:	4a5d      	ldr	r2, [pc, #372]	@ (8000ab0 <HAL_UART_MspInit+0x218>)
 800093c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 800093e:	4b5b      	ldr	r3, [pc, #364]	@ (8000aac <HAL_UART_MspInit+0x214>)
 8000940:	2202      	movs	r2, #2
 8000942:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000944:	4b59      	ldr	r3, [pc, #356]	@ (8000aac <HAL_UART_MspInit+0x214>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800094a:	4b58      	ldr	r3, [pc, #352]	@ (8000aac <HAL_UART_MspInit+0x214>)
 800094c:	2200      	movs	r2, #0
 800094e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000950:	4b56      	ldr	r3, [pc, #344]	@ (8000aac <HAL_UART_MspInit+0x214>)
 8000952:	2280      	movs	r2, #128	@ 0x80
 8000954:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000956:	4b55      	ldr	r3, [pc, #340]	@ (8000aac <HAL_UART_MspInit+0x214>)
 8000958:	2200      	movs	r2, #0
 800095a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800095c:	4b53      	ldr	r3, [pc, #332]	@ (8000aac <HAL_UART_MspInit+0x214>)
 800095e:	2200      	movs	r2, #0
 8000960:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000962:	4b52      	ldr	r3, [pc, #328]	@ (8000aac <HAL_UART_MspInit+0x214>)
 8000964:	2200      	movs	r2, #0
 8000966:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000968:	4b50      	ldr	r3, [pc, #320]	@ (8000aac <HAL_UART_MspInit+0x214>)
 800096a:	2200      	movs	r2, #0
 800096c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800096e:	484f      	ldr	r0, [pc, #316]	@ (8000aac <HAL_UART_MspInit+0x214>)
 8000970:	f000 faa2 	bl	8000eb8 <HAL_DMA_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800097a:	f7ff fe8c 	bl	8000696 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4a4a      	ldr	r2, [pc, #296]	@ (8000aac <HAL_UART_MspInit+0x214>)
 8000982:	675a      	str	r2, [r3, #116]	@ 0x74
 8000984:	4a49      	ldr	r2, [pc, #292]	@ (8000aac <HAL_UART_MspInit+0x214>)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	2100      	movs	r1, #0
 800098e:	2025      	movs	r0, #37	@ 0x25
 8000990:	f000 fa5b 	bl	8000e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000994:	2025      	movs	r0, #37	@ 0x25
 8000996:	f000 fa74 	bl	8000e82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800099a:	e07e      	b.n	8000a9a <HAL_UART_MspInit+0x202>
  else if(uartHandle->Instance==USART2)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a44      	ldr	r2, [pc, #272]	@ (8000ab4 <HAL_UART_MspInit+0x21c>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d179      	bne.n	8000a9a <HAL_UART_MspInit+0x202>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009a6:	2302      	movs	r3, #2
 80009a8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009aa:	2300      	movs	r3, #0
 80009ac:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009ae:	f107 0318 	add.w	r3, r7, #24
 80009b2:	4618      	mov	r0, r3
 80009b4:	f001 fd68 	bl	8002488 <HAL_RCCEx_PeriphCLKConfig>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <HAL_UART_MspInit+0x12a>
      Error_Handler();
 80009be:	f7ff fe6a 	bl	8000696 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80009c2:	4b39      	ldr	r3, [pc, #228]	@ (8000aa8 <HAL_UART_MspInit+0x210>)
 80009c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009c6:	4a38      	ldr	r2, [pc, #224]	@ (8000aa8 <HAL_UART_MspInit+0x210>)
 80009c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80009ce:	4b36      	ldr	r3, [pc, #216]	@ (8000aa8 <HAL_UART_MspInit+0x210>)
 80009d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	4b33      	ldr	r3, [pc, #204]	@ (8000aa8 <HAL_UART_MspInit+0x210>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009de:	4a32      	ldr	r2, [pc, #200]	@ (8000aa8 <HAL_UART_MspInit+0x210>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e6:	4b30      	ldr	r3, [pc, #192]	@ (8000aa8 <HAL_UART_MspInit+0x210>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80009f2:	2304      	movs	r3, #4
 80009f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fe:	2303      	movs	r3, #3
 8000a00:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a02:	2307      	movs	r3, #7
 8000a04:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a10:	f000 fcc8 	bl	80013a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000a14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a18:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a22:	2303      	movs	r3, #3
 8000a24:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000a26:	2303      	movs	r3, #3
 8000a28:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000a2e:	4619      	mov	r1, r3
 8000a30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a34:	f000 fcb6 	bl	80013a4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000a38:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab8 <HAL_UART_MspInit+0x220>)
 8000a3a:	4a20      	ldr	r2, [pc, #128]	@ (8000abc <HAL_UART_MspInit+0x224>)
 8000a3c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8000a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab8 <HAL_UART_MspInit+0x220>)
 8000a40:	2202      	movs	r2, #2
 8000a42:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a44:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab8 <HAL_UART_MspInit+0x220>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a4a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab8 <HAL_UART_MspInit+0x220>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a50:	4b19      	ldr	r3, [pc, #100]	@ (8000ab8 <HAL_UART_MspInit+0x220>)
 8000a52:	2280      	movs	r2, #128	@ 0x80
 8000a54:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a56:	4b18      	ldr	r3, [pc, #96]	@ (8000ab8 <HAL_UART_MspInit+0x220>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a5c:	4b16      	ldr	r3, [pc, #88]	@ (8000ab8 <HAL_UART_MspInit+0x220>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000a62:	4b15      	ldr	r3, [pc, #84]	@ (8000ab8 <HAL_UART_MspInit+0x220>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b13      	ldr	r3, [pc, #76]	@ (8000ab8 <HAL_UART_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000a6e:	4812      	ldr	r0, [pc, #72]	@ (8000ab8 <HAL_UART_MspInit+0x220>)
 8000a70:	f000 fa22 	bl	8000eb8 <HAL_DMA_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <HAL_UART_MspInit+0x1e6>
      Error_Handler();
 8000a7a:	f7ff fe0c 	bl	8000696 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4a0d      	ldr	r2, [pc, #52]	@ (8000ab8 <HAL_UART_MspInit+0x220>)
 8000a82:	675a      	str	r2, [r3, #116]	@ 0x74
 8000a84:	4a0c      	ldr	r2, [pc, #48]	@ (8000ab8 <HAL_UART_MspInit+0x220>)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	2026      	movs	r0, #38	@ 0x26
 8000a90:	f000 f9db 	bl	8000e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a94:	2026      	movs	r0, #38	@ 0x26
 8000a96:	f000 f9f4 	bl	8000e82 <HAL_NVIC_EnableIRQ>
}
 8000a9a:	bf00      	nop
 8000a9c:	3760      	adds	r7, #96	@ 0x60
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40013800 	.word	0x40013800
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	20000238 	.word	0x20000238
 8000ab0:	40020058 	.word	0x40020058
 8000ab4:	40004400 	.word	0x40004400
 8000ab8:	20000280 	.word	0x20000280
 8000abc:	4002006c 	.word	0x4002006c

08000ac0 <HAL_UART_RxCpltCallback>:
}

/* USER CODE BEGIN 1 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	if (huart == &huart1)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	4a0d      	ldr	r2, [pc, #52]	@ (8000b00 <HAL_UART_RxCpltCallback+0x40>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d012      	beq.n	8000af6 <HAL_UART_RxCpltCallback+0x36>
	{
		// Response received from OBD emulator
	}

	else if (huart == &huart2)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4a0c      	ldr	r2, [pc, #48]	@ (8000b04 <HAL_UART_RxCpltCallback+0x44>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d10e      	bne.n	8000af6 <HAL_UART_RxCpltCallback+0x36>
	{
		// Command received from computer
		cmd_tx_buffer[0] = 0xAA;
 8000ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8000b08 <HAL_UART_RxCpltCallback+0x48>)
 8000ada:	22aa      	movs	r2, #170	@ 0xaa
 8000adc:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(huart, cmd_tx_buffer, sizeof(uint8_t), HAL_MAX_DELAY);
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	4908      	ldr	r1, [pc, #32]	@ (8000b08 <HAL_UART_RxCpltCallback+0x48>)
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f001 fea2 	bl	8002830 <HAL_UART_Transmit>

		HAL_UART_Receive_DMA(huart, cmd_rx_buffer, sizeof(cmd_rx_buffer));
 8000aec:	2280      	movs	r2, #128	@ 0x80
 8000aee:	4907      	ldr	r1, [pc, #28]	@ (8000b0c <HAL_UART_RxCpltCallback+0x4c>)
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f001 ff27 	bl	8002944 <HAL_UART_Receive_DMA>
	}
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000128 	.word	0x20000128
 8000b04:	200001b0 	.word	0x200001b0
 8000b08:	200000a8 	.word	0x200000a8
 8000b0c:	20000028 	.word	0x20000028

08000b10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b14:	f7ff fe4e 	bl	80007b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b18:	480c      	ldr	r0, [pc, #48]	@ (8000b4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b1a:	490d      	ldr	r1, [pc, #52]	@ (8000b50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b54 <LoopForever+0xe>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b20:	e002      	b.n	8000b28 <LoopCopyDataInit>

08000b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b26:	3304      	adds	r3, #4

08000b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b2c:	d3f9      	bcc.n	8000b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b30:	4c0a      	ldr	r4, [pc, #40]	@ (8000b5c <LoopForever+0x16>)
  movs r3, #0
 8000b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b34:	e001      	b.n	8000b3a <LoopFillZerobss>

08000b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b38:	3204      	adds	r2, #4

08000b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b3c:	d3fb      	bcc.n	8000b36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b3e:	f003 f8ff 	bl	8003d40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b42:	f7ff fd2b 	bl	800059c <main>

08000b46 <LoopForever>:

LoopForever:
    b LoopForever
 8000b46:	e7fe      	b.n	8000b46 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b48:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000b4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b50:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b54:	08003df8 	.word	0x08003df8
  ldr r2, =_sbss
 8000b58:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b5c:	200002cc 	.word	0x200002cc

08000b60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b60:	e7fe      	b.n	8000b60 <ADC1_2_IRQHandler>

08000b62 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b6c:	2003      	movs	r0, #3
 8000b6e:	f000 f961 	bl	8000e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b72:	2000      	movs	r0, #0
 8000b74:	f000 f80e 	bl	8000b94 <HAL_InitTick>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d002      	beq.n	8000b84 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	71fb      	strb	r3, [r7, #7]
 8000b82:	e001      	b.n	8000b88 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b84:	f7ff fd8e 	bl	80006a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b88:	79fb      	ldrb	r3, [r7, #7]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ba0:	4b17      	ldr	r3, [pc, #92]	@ (8000c00 <HAL_InitTick+0x6c>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d023      	beq.n	8000bf0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ba8:	4b16      	ldr	r3, [pc, #88]	@ (8000c04 <HAL_InitTick+0x70>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	4b14      	ldr	r3, [pc, #80]	@ (8000c00 <HAL_InitTick+0x6c>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f000 f96d 	bl	8000e9e <HAL_SYSTICK_Config>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d10f      	bne.n	8000bea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2b0f      	cmp	r3, #15
 8000bce:	d809      	bhi.n	8000be4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	6879      	ldr	r1, [r7, #4]
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd8:	f000 f937 	bl	8000e4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bdc:	4a0a      	ldr	r2, [pc, #40]	@ (8000c08 <HAL_InitTick+0x74>)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6013      	str	r3, [r2, #0]
 8000be2:	e007      	b.n	8000bf4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000be4:	2301      	movs	r3, #1
 8000be6:	73fb      	strb	r3, [r7, #15]
 8000be8:	e004      	b.n	8000bf4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	73fb      	strb	r3, [r7, #15]
 8000bee:	e001      	b.n	8000bf4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000008 	.word	0x20000008
 8000c04:	20000000 	.word	0x20000000
 8000c08:	20000004 	.word	0x20000004

08000c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c10:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <HAL_IncTick+0x20>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <HAL_IncTick+0x24>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	4a04      	ldr	r2, [pc, #16]	@ (8000c30 <HAL_IncTick+0x24>)
 8000c1e:	6013      	str	r3, [r2, #0]
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000008 	.word	0x20000008
 8000c30:	200002c8 	.word	0x200002c8

08000c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return uwTick;
 8000c38:	4b03      	ldr	r3, [pc, #12]	@ (8000c48 <HAL_GetTick+0x14>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	200002c8 	.word	0x200002c8

08000c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c54:	f7ff ffee 	bl	8000c34 <HAL_GetTick>
 8000c58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c64:	d005      	beq.n	8000c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c66:	4b0a      	ldr	r3, [pc, #40]	@ (8000c90 <HAL_Delay+0x44>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	4413      	add	r3, r2
 8000c70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c72:	bf00      	nop
 8000c74:	f7ff ffde 	bl	8000c34 <HAL_GetTick>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d8f7      	bhi.n	8000c74 <HAL_Delay+0x28>
  {
  }
}
 8000c84:	bf00      	nop
 8000c86:	bf00      	nop
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000008 	.word	0x20000008

08000c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000caa:	68ba      	ldr	r2, [r7, #8]
 8000cac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cc6:	4a04      	ldr	r2, [pc, #16]	@ (8000cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	60d3      	str	r3, [r2, #12]
}
 8000ccc:	bf00      	nop
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce0:	4b04      	ldr	r3, [pc, #16]	@ (8000cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	0a1b      	lsrs	r3, r3, #8
 8000ce6:	f003 0307 	and.w	r3, r3, #7
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	db0b      	blt.n	8000d22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	f003 021f 	and.w	r2, r3, #31
 8000d10:	4907      	ldr	r1, [pc, #28]	@ (8000d30 <__NVIC_EnableIRQ+0x38>)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	095b      	lsrs	r3, r3, #5
 8000d18:	2001      	movs	r0, #1
 8000d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000e100 	.word	0xe000e100

08000d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	6039      	str	r1, [r7, #0]
 8000d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	db0a      	blt.n	8000d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	490c      	ldr	r1, [pc, #48]	@ (8000d80 <__NVIC_SetPriority+0x4c>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	0112      	lsls	r2, r2, #4
 8000d54:	b2d2      	uxtb	r2, r2
 8000d56:	440b      	add	r3, r1
 8000d58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d5c:	e00a      	b.n	8000d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4908      	ldr	r1, [pc, #32]	@ (8000d84 <__NVIC_SetPriority+0x50>)
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	3b04      	subs	r3, #4
 8000d6c:	0112      	lsls	r2, r2, #4
 8000d6e:	b2d2      	uxtb	r2, r2
 8000d70:	440b      	add	r3, r1
 8000d72:	761a      	strb	r2, [r3, #24]
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000e100 	.word	0xe000e100
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b089      	sub	sp, #36	@ 0x24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	f1c3 0307 	rsb	r3, r3, #7
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	bf28      	it	cs
 8000da6:	2304      	movcs	r3, #4
 8000da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3304      	adds	r3, #4
 8000dae:	2b06      	cmp	r3, #6
 8000db0:	d902      	bls.n	8000db8 <NVIC_EncodePriority+0x30>
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3b03      	subs	r3, #3
 8000db6:	e000      	b.n	8000dba <NVIC_EncodePriority+0x32>
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43da      	mvns	r2, r3
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	401a      	ands	r2, r3
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dda:	43d9      	mvns	r1, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	4313      	orrs	r3, r2
         );
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3724      	adds	r7, #36	@ 0x24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
	...

08000df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e00:	d301      	bcc.n	8000e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e02:	2301      	movs	r3, #1
 8000e04:	e00f      	b.n	8000e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e06:	4a0a      	ldr	r2, [pc, #40]	@ (8000e30 <SysTick_Config+0x40>)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e0e:	210f      	movs	r1, #15
 8000e10:	f04f 30ff 	mov.w	r0, #4294967295
 8000e14:	f7ff ff8e 	bl	8000d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e18:	4b05      	ldr	r3, [pc, #20]	@ (8000e30 <SysTick_Config+0x40>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e1e:	4b04      	ldr	r3, [pc, #16]	@ (8000e30 <SysTick_Config+0x40>)
 8000e20:	2207      	movs	r2, #7
 8000e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	e000e010 	.word	0xe000e010

08000e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f7ff ff29 	bl	8000c94 <__NVIC_SetPriorityGrouping>
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b086      	sub	sp, #24
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	4603      	mov	r3, r0
 8000e52:	60b9      	str	r1, [r7, #8]
 8000e54:	607a      	str	r2, [r7, #4]
 8000e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e5c:	f7ff ff3e 	bl	8000cdc <__NVIC_GetPriorityGrouping>
 8000e60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	68b9      	ldr	r1, [r7, #8]
 8000e66:	6978      	ldr	r0, [r7, #20]
 8000e68:	f7ff ff8e 	bl	8000d88 <NVIC_EncodePriority>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e72:	4611      	mov	r1, r2
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff ff5d 	bl	8000d34 <__NVIC_SetPriority>
}
 8000e7a:	bf00      	nop
 8000e7c:	3718      	adds	r7, #24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	4603      	mov	r3, r0
 8000e8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff ff31 	bl	8000cf8 <__NVIC_EnableIRQ>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff ffa2 	bl	8000df0 <SysTick_Config>
 8000eac:	4603      	mov	r3, r0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d101      	bne.n	8000eca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e098      	b.n	8000ffc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	4b4d      	ldr	r3, [pc, #308]	@ (8001008 <HAL_DMA_Init+0x150>)
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d80f      	bhi.n	8000ef6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	461a      	mov	r2, r3
 8000edc:	4b4b      	ldr	r3, [pc, #300]	@ (800100c <HAL_DMA_Init+0x154>)
 8000ede:	4413      	add	r3, r2
 8000ee0:	4a4b      	ldr	r2, [pc, #300]	@ (8001010 <HAL_DMA_Init+0x158>)
 8000ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee6:	091b      	lsrs	r3, r3, #4
 8000ee8:	009a      	lsls	r2, r3, #2
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a48      	ldr	r2, [pc, #288]	@ (8001014 <HAL_DMA_Init+0x15c>)
 8000ef2:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ef4:	e00e      	b.n	8000f14 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	4b46      	ldr	r3, [pc, #280]	@ (8001018 <HAL_DMA_Init+0x160>)
 8000efe:	4413      	add	r3, r2
 8000f00:	4a43      	ldr	r2, [pc, #268]	@ (8001010 <HAL_DMA_Init+0x158>)
 8000f02:	fba2 2303 	umull	r2, r3, r2, r3
 8000f06:	091b      	lsrs	r3, r3, #4
 8000f08:	009a      	lsls	r2, r3, #2
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a42      	ldr	r2, [pc, #264]	@ (800101c <HAL_DMA_Init+0x164>)
 8000f12:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2202      	movs	r2, #2
 8000f18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000f2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000f2e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000f38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	691b      	ldr	r3, [r3, #16]
 8000f3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	699b      	ldr	r3, [r3, #24]
 8000f4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6a1b      	ldr	r3, [r3, #32]
 8000f56:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f58:	68fa      	ldr	r2, [r7, #12]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000f6e:	d039      	beq.n	8000fe4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f74:	4a27      	ldr	r2, [pc, #156]	@ (8001014 <HAL_DMA_Init+0x15c>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d11a      	bne.n	8000fb0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f7a:	4b29      	ldr	r3, [pc, #164]	@ (8001020 <HAL_DMA_Init+0x168>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f82:	f003 031c 	and.w	r3, r3, #28
 8000f86:	210f      	movs	r1, #15
 8000f88:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	4924      	ldr	r1, [pc, #144]	@ (8001020 <HAL_DMA_Init+0x168>)
 8000f90:	4013      	ands	r3, r2
 8000f92:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000f94:	4b22      	ldr	r3, [pc, #136]	@ (8001020 <HAL_DMA_Init+0x168>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6859      	ldr	r1, [r3, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa0:	f003 031c 	and.w	r3, r3, #28
 8000fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa8:	491d      	ldr	r1, [pc, #116]	@ (8001020 <HAL_DMA_Init+0x168>)
 8000faa:	4313      	orrs	r3, r2
 8000fac:	600b      	str	r3, [r1, #0]
 8000fae:	e019      	b.n	8000fe4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000fb0:	4b1c      	ldr	r3, [pc, #112]	@ (8001024 <HAL_DMA_Init+0x16c>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb8:	f003 031c 	and.w	r3, r3, #28
 8000fbc:	210f      	movs	r1, #15
 8000fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	4917      	ldr	r1, [pc, #92]	@ (8001024 <HAL_DMA_Init+0x16c>)
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000fca:	4b16      	ldr	r3, [pc, #88]	@ (8001024 <HAL_DMA_Init+0x16c>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6859      	ldr	r1, [r3, #4]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fd6:	f003 031c 	and.w	r3, r3, #28
 8000fda:	fa01 f303 	lsl.w	r3, r1, r3
 8000fde:	4911      	ldr	r1, [pc, #68]	@ (8001024 <HAL_DMA_Init+0x16c>)
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2201      	movs	r2, #1
 8000fee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8000ffa:	2300      	movs	r3, #0
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	40020407 	.word	0x40020407
 800100c:	bffdfff8 	.word	0xbffdfff8
 8001010:	cccccccd 	.word	0xcccccccd
 8001014:	40020000 	.word	0x40020000
 8001018:	bffdfbf8 	.word	0xbffdfbf8
 800101c:	40020400 	.word	0x40020400
 8001020:	400200a8 	.word	0x400200a8
 8001024:	400204a8 	.word	0x400204a8

08001028 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001036:	2300      	movs	r3, #0
 8001038:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001040:	2b01      	cmp	r3, #1
 8001042:	d101      	bne.n	8001048 <HAL_DMA_Start_IT+0x20>
 8001044:	2302      	movs	r3, #2
 8001046:	e04b      	b.n	80010e0 <HAL_DMA_Start_IT+0xb8>
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2201      	movs	r2, #1
 800104c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2b01      	cmp	r3, #1
 800105a:	d13a      	bne.n	80010d2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2202      	movs	r2, #2
 8001060:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2200      	movs	r2, #0
 8001068:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f022 0201 	bic.w	r2, r2, #1
 8001078:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	68b9      	ldr	r1, [r7, #8]
 8001080:	68f8      	ldr	r0, [r7, #12]
 8001082:	f000 f95f 	bl	8001344 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	2b00      	cmp	r3, #0
 800108c:	d008      	beq.n	80010a0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f042 020e 	orr.w	r2, r2, #14
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	e00f      	b.n	80010c0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f022 0204 	bic.w	r2, r2, #4
 80010ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f042 020a 	orr.w	r2, r2, #10
 80010be:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f042 0201 	orr.w	r2, r2, #1
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	e005      	b.n	80010de <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80010da:	2302      	movs	r3, #2
 80010dc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80010de:	7dfb      	ldrb	r3, [r7, #23]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010f0:	2300      	movs	r3, #0
 80010f2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d008      	beq.n	8001112 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2204      	movs	r2, #4
 8001104:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e022      	b.n	8001158 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f022 020e 	bic.w	r2, r2, #14
 8001120:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f022 0201 	bic.w	r2, r2, #1
 8001130:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001136:	f003 021c 	and.w	r2, r3, #28
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113e:	2101      	movs	r1, #1
 8001140:	fa01 f202 	lsl.w	r2, r1, r2
 8001144:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2201      	movs	r2, #1
 800114a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001156:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001158:	4618      	mov	r0, r3
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800116c:	2300      	movs	r3, #0
 800116e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001176:	b2db      	uxtb	r3, r3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d005      	beq.n	8001188 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2204      	movs	r2, #4
 8001180:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	73fb      	strb	r3, [r7, #15]
 8001186:	e029      	b.n	80011dc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f022 020e 	bic.w	r2, r2, #14
 8001196:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f022 0201 	bic.w	r2, r2, #1
 80011a6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ac:	f003 021c 	and.w	r2, r3, #28
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b4:	2101      	movs	r1, #1
 80011b6:	fa01 f202 	lsl.w	r2, r1, r2
 80011ba:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2201      	movs	r2, #1
 80011c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d003      	beq.n	80011dc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	4798      	blx	r3
    }
  }
  return status;
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b084      	sub	sp, #16
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001202:	f003 031c 	and.w	r3, r3, #28
 8001206:	2204      	movs	r2, #4
 8001208:	409a      	lsls	r2, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	4013      	ands	r3, r2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d026      	beq.n	8001260 <HAL_DMA_IRQHandler+0x7a>
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	f003 0304 	and.w	r3, r3, #4
 8001218:	2b00      	cmp	r3, #0
 800121a:	d021      	beq.n	8001260 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0320 	and.w	r3, r3, #32
 8001226:	2b00      	cmp	r3, #0
 8001228:	d107      	bne.n	800123a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f022 0204 	bic.w	r2, r2, #4
 8001238:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123e:	f003 021c 	and.w	r2, r3, #28
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001246:	2104      	movs	r1, #4
 8001248:	fa01 f202 	lsl.w	r2, r1, r2
 800124c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	2b00      	cmp	r3, #0
 8001254:	d071      	beq.n	800133a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800125e:	e06c      	b.n	800133a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001264:	f003 031c 	and.w	r3, r3, #28
 8001268:	2202      	movs	r2, #2
 800126a:	409a      	lsls	r2, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4013      	ands	r3, r2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d02e      	beq.n	80012d2 <HAL_DMA_IRQHandler+0xec>
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d029      	beq.n	80012d2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0320 	and.w	r3, r3, #32
 8001288:	2b00      	cmp	r3, #0
 800128a:	d10b      	bne.n	80012a4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f022 020a 	bic.w	r2, r2, #10
 800129a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2201      	movs	r2, #1
 80012a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a8:	f003 021c 	and.w	r2, r3, #28
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b0:	2102      	movs	r1, #2
 80012b2:	fa01 f202 	lsl.w	r2, r1, r2
 80012b6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d038      	beq.n	800133a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80012d0:	e033      	b.n	800133a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d6:	f003 031c 	and.w	r3, r3, #28
 80012da:	2208      	movs	r2, #8
 80012dc:	409a      	lsls	r2, r3
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	4013      	ands	r3, r2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d02a      	beq.n	800133c <HAL_DMA_IRQHandler+0x156>
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	f003 0308 	and.w	r3, r3, #8
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d025      	beq.n	800133c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 020e 	bic.w	r2, r2, #14
 80012fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001304:	f003 021c 	and.w	r2, r3, #28
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130c:	2101      	movs	r1, #1
 800130e:	fa01 f202 	lsl.w	r2, r1, r2
 8001312:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2201      	movs	r2, #1
 8001318:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2201      	movs	r2, #1
 800131e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800132e:	2b00      	cmp	r3, #0
 8001330:	d004      	beq.n	800133c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800133a:	bf00      	nop
 800133c:	bf00      	nop
}
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
 8001350:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001356:	f003 021c 	and.w	r2, r3, #28
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135e:	2101      	movs	r1, #1
 8001360:	fa01 f202 	lsl.w	r2, r1, r2
 8001364:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	683a      	ldr	r2, [r7, #0]
 800136c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	2b10      	cmp	r3, #16
 8001374:	d108      	bne.n	8001388 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	68ba      	ldr	r2, [r7, #8]
 8001384:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001386:	e007      	b.n	8001398 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68ba      	ldr	r2, [r7, #8]
 800138e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	60da      	str	r2, [r3, #12]
}
 8001398:	bf00      	nop
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b087      	sub	sp, #28
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013b2:	e14e      	b.n	8001652 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	2101      	movs	r1, #1
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	fa01 f303 	lsl.w	r3, r1, r3
 80013c0:	4013      	ands	r3, r2
 80013c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f000 8140 	beq.w	800164c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 0303 	and.w	r3, r3, #3
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d005      	beq.n	80013e4 <HAL_GPIO_Init+0x40>
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 0303 	and.w	r3, r3, #3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d130      	bne.n	8001446 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	2203      	movs	r2, #3
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	4013      	ands	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	68da      	ldr	r2, [r3, #12]
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	4313      	orrs	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800141a:	2201      	movs	r2, #1
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43db      	mvns	r3, r3
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	4013      	ands	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	091b      	lsrs	r3, r3, #4
 8001430:	f003 0201 	and.w	r2, r3, #1
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f003 0303 	and.w	r3, r3, #3
 800144e:	2b03      	cmp	r3, #3
 8001450:	d017      	beq.n	8001482 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	2203      	movs	r2, #3
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43db      	mvns	r3, r3
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	4013      	ands	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	689a      	ldr	r2, [r3, #8]
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	4313      	orrs	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f003 0303 	and.w	r3, r3, #3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d123      	bne.n	80014d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	08da      	lsrs	r2, r3, #3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	3208      	adds	r2, #8
 8001496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800149a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	220f      	movs	r2, #15
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	4013      	ands	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	691a      	ldr	r2, [r3, #16]
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	f003 0307 	and.w	r3, r3, #7
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	08da      	lsrs	r2, r3, #3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3208      	adds	r2, #8
 80014d0:	6939      	ldr	r1, [r7, #16]
 80014d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	2203      	movs	r2, #3
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43db      	mvns	r3, r3
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	4013      	ands	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f003 0203 	and.w	r2, r3, #3
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	4313      	orrs	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001512:	2b00      	cmp	r3, #0
 8001514:	f000 809a 	beq.w	800164c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001518:	4b55      	ldr	r3, [pc, #340]	@ (8001670 <HAL_GPIO_Init+0x2cc>)
 800151a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800151c:	4a54      	ldr	r2, [pc, #336]	@ (8001670 <HAL_GPIO_Init+0x2cc>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	6613      	str	r3, [r2, #96]	@ 0x60
 8001524:	4b52      	ldr	r3, [pc, #328]	@ (8001670 <HAL_GPIO_Init+0x2cc>)
 8001526:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001530:	4a50      	ldr	r2, [pc, #320]	@ (8001674 <HAL_GPIO_Init+0x2d0>)
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	089b      	lsrs	r3, r3, #2
 8001536:	3302      	adds	r3, #2
 8001538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800153c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	f003 0303 	and.w	r3, r3, #3
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	220f      	movs	r2, #15
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4013      	ands	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800155a:	d013      	beq.n	8001584 <HAL_GPIO_Init+0x1e0>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4a46      	ldr	r2, [pc, #280]	@ (8001678 <HAL_GPIO_Init+0x2d4>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d00d      	beq.n	8001580 <HAL_GPIO_Init+0x1dc>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4a45      	ldr	r2, [pc, #276]	@ (800167c <HAL_GPIO_Init+0x2d8>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d007      	beq.n	800157c <HAL_GPIO_Init+0x1d8>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a44      	ldr	r2, [pc, #272]	@ (8001680 <HAL_GPIO_Init+0x2dc>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d101      	bne.n	8001578 <HAL_GPIO_Init+0x1d4>
 8001574:	2303      	movs	r3, #3
 8001576:	e006      	b.n	8001586 <HAL_GPIO_Init+0x1e2>
 8001578:	2307      	movs	r3, #7
 800157a:	e004      	b.n	8001586 <HAL_GPIO_Init+0x1e2>
 800157c:	2302      	movs	r3, #2
 800157e:	e002      	b.n	8001586 <HAL_GPIO_Init+0x1e2>
 8001580:	2301      	movs	r3, #1
 8001582:	e000      	b.n	8001586 <HAL_GPIO_Init+0x1e2>
 8001584:	2300      	movs	r3, #0
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	f002 0203 	and.w	r2, r2, #3
 800158c:	0092      	lsls	r2, r2, #2
 800158e:	4093      	lsls	r3, r2
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	4313      	orrs	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001596:	4937      	ldr	r1, [pc, #220]	@ (8001674 <HAL_GPIO_Init+0x2d0>)
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	089b      	lsrs	r3, r3, #2
 800159c:	3302      	adds	r3, #2
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015a4:	4b37      	ldr	r3, [pc, #220]	@ (8001684 <HAL_GPIO_Init+0x2e0>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	43db      	mvns	r3, r3
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	4013      	ands	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015c8:	4a2e      	ldr	r2, [pc, #184]	@ (8001684 <HAL_GPIO_Init+0x2e0>)
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001684 <HAL_GPIO_Init+0x2e0>)
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	43db      	mvns	r3, r3
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	4013      	ands	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015f2:	4a24      	ldr	r2, [pc, #144]	@ (8001684 <HAL_GPIO_Init+0x2e0>)
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015f8:	4b22      	ldr	r3, [pc, #136]	@ (8001684 <HAL_GPIO_Init+0x2e0>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	43db      	mvns	r3, r3
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	4013      	ands	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d003      	beq.n	800161c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	4313      	orrs	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800161c:	4a19      	ldr	r2, [pc, #100]	@ (8001684 <HAL_GPIO_Init+0x2e0>)
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001622:	4b18      	ldr	r3, [pc, #96]	@ (8001684 <HAL_GPIO_Init+0x2e0>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	43db      	mvns	r3, r3
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	4013      	ands	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4313      	orrs	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001646:	4a0f      	ldr	r2, [pc, #60]	@ (8001684 <HAL_GPIO_Init+0x2e0>)
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	3301      	adds	r3, #1
 8001650:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	fa22 f303 	lsr.w	r3, r2, r3
 800165c:	2b00      	cmp	r3, #0
 800165e:	f47f aea9 	bne.w	80013b4 <HAL_GPIO_Init+0x10>
  }
}
 8001662:	bf00      	nop
 8001664:	bf00      	nop
 8001666:	371c      	adds	r7, #28
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	40021000 	.word	0x40021000
 8001674:	40010000 	.word	0x40010000
 8001678:	48000400 	.word	0x48000400
 800167c:	48000800 	.word	0x48000800
 8001680:	48000c00 	.word	0x48000c00
 8001684:	40010400 	.word	0x40010400

08001688 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	807b      	strh	r3, [r7, #2]
 8001694:	4613      	mov	r3, r2
 8001696:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001698:	787b      	ldrb	r3, [r7, #1]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800169e:	887a      	ldrh	r2, [r7, #2]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016a4:	e002      	b.n	80016ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016a6:	887a      	ldrh	r2, [r7, #2]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016bc:	4b04      	ldr	r3, [pc, #16]	@ (80016d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	40007000 	.word	0x40007000

080016d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016e2:	d130      	bne.n	8001746 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016e4:	4b23      	ldr	r3, [pc, #140]	@ (8001774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80016ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016f0:	d038      	beq.n	8001764 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016f2:	4b20      	ldr	r3, [pc, #128]	@ (8001774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80016fa:	4a1e      	ldr	r2, [pc, #120]	@ (8001774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001700:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001702:	4b1d      	ldr	r3, [pc, #116]	@ (8001778 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2232      	movs	r2, #50	@ 0x32
 8001708:	fb02 f303 	mul.w	r3, r2, r3
 800170c:	4a1b      	ldr	r2, [pc, #108]	@ (800177c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800170e:	fba2 2303 	umull	r2, r3, r2, r3
 8001712:	0c9b      	lsrs	r3, r3, #18
 8001714:	3301      	adds	r3, #1
 8001716:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001718:	e002      	b.n	8001720 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	3b01      	subs	r3, #1
 800171e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001720:	4b14      	ldr	r3, [pc, #80]	@ (8001774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001722:	695b      	ldr	r3, [r3, #20]
 8001724:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001728:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800172c:	d102      	bne.n	8001734 <HAL_PWREx_ControlVoltageScaling+0x60>
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1f2      	bne.n	800171a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001734:	4b0f      	ldr	r3, [pc, #60]	@ (8001774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001736:	695b      	ldr	r3, [r3, #20]
 8001738:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800173c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001740:	d110      	bne.n	8001764 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e00f      	b.n	8001766 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001746:	4b0b      	ldr	r3, [pc, #44]	@ (8001774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800174e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001752:	d007      	beq.n	8001764 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001754:	4b07      	ldr	r3, [pc, #28]	@ (8001774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800175c:	4a05      	ldr	r2, [pc, #20]	@ (8001774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800175e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001762:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3714      	adds	r7, #20
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	40007000 	.word	0x40007000
 8001778:	20000000 	.word	0x20000000
 800177c:	431bde83 	.word	0x431bde83

08001780 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08a      	sub	sp, #40	@ 0x28
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d102      	bne.n	8001794 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	f000 bc4f 	b.w	8002032 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001794:	4b97      	ldr	r3, [pc, #604]	@ (80019f4 <HAL_RCC_OscConfig+0x274>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f003 030c 	and.w	r3, r3, #12
 800179c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800179e:	4b95      	ldr	r3, [pc, #596]	@ (80019f4 <HAL_RCC_OscConfig+0x274>)
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	f003 0303 	and.w	r3, r3, #3
 80017a6:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0310 	and.w	r3, r3, #16
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f000 80e6 	beq.w	8001982 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017b6:	6a3b      	ldr	r3, [r7, #32]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d007      	beq.n	80017cc <HAL_RCC_OscConfig+0x4c>
 80017bc:	6a3b      	ldr	r3, [r7, #32]
 80017be:	2b0c      	cmp	r3, #12
 80017c0:	f040 808d 	bne.w	80018de <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	f040 8089 	bne.w	80018de <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017cc:	4b89      	ldr	r3, [pc, #548]	@ (80019f4 <HAL_RCC_OscConfig+0x274>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d006      	beq.n	80017e6 <HAL_RCC_OscConfig+0x66>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	69db      	ldr	r3, [r3, #28]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d102      	bne.n	80017e6 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	f000 bc26 	b.w	8002032 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017ea:	4b82      	ldr	r3, [pc, #520]	@ (80019f4 <HAL_RCC_OscConfig+0x274>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0308 	and.w	r3, r3, #8
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d004      	beq.n	8001800 <HAL_RCC_OscConfig+0x80>
 80017f6:	4b7f      	ldr	r3, [pc, #508]	@ (80019f4 <HAL_RCC_OscConfig+0x274>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017fe:	e005      	b.n	800180c <HAL_RCC_OscConfig+0x8c>
 8001800:	4b7c      	ldr	r3, [pc, #496]	@ (80019f4 <HAL_RCC_OscConfig+0x274>)
 8001802:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001806:	091b      	lsrs	r3, r3, #4
 8001808:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800180c:	4293      	cmp	r3, r2
 800180e:	d224      	bcs.n	800185a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001814:	4618      	mov	r0, r3
 8001816:	f000 fdd7 	bl	80023c8 <RCC_SetFlashLatencyFromMSIRange>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d002      	beq.n	8001826 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	f000 bc06 	b.w	8002032 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001826:	4b73      	ldr	r3, [pc, #460]	@ (80019f4 <HAL_RCC_OscConfig+0x274>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a72      	ldr	r2, [pc, #456]	@ (80019f4 <HAL_RCC_OscConfig+0x274>)
 800182c:	f043 0308 	orr.w	r3, r3, #8
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	4b70      	ldr	r3, [pc, #448]	@ (80019f4 <HAL_RCC_OscConfig+0x274>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800183e:	496d      	ldr	r1, [pc, #436]	@ (80019f4 <HAL_RCC_OscConfig+0x274>)
 8001840:	4313      	orrs	r3, r2
 8001842:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001844:	4b6b      	ldr	r3, [pc, #428]	@ (80019f4 <HAL_RCC_OscConfig+0x274>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a1b      	ldr	r3, [r3, #32]
 8001850:	021b      	lsls	r3, r3, #8
 8001852:	4968      	ldr	r1, [pc, #416]	@ (80019f4 <HAL_RCC_OscConfig+0x274>)
 8001854:	4313      	orrs	r3, r2
 8001856:	604b      	str	r3, [r1, #4]
 8001858:	e025      	b.n	80018a6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800185a:	4b66      	ldr	r3, [pc, #408]	@ (80019f4 <HAL_RCC_OscConfig+0x274>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a65      	ldr	r2, [pc, #404]	@ (80019f4 <HAL_RCC_OscConfig+0x274>)
 8001860:	f043 0308 	orr.w	r3, r3, #8
 8001864:	6013      	str	r3, [r2, #0]
 8001866:	4b63      	ldr	r3, [pc, #396]	@ (80019f4 <HAL_RCC_OscConfig+0x274>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001872:	4960      	ldr	r1, [pc, #384]	@ (80019f4 <HAL_RCC_OscConfig+0x274>)
 8001874:	4313      	orrs	r3, r2
 8001876:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001878:	4b5e      	ldr	r3, [pc, #376]	@ (80019f4 <HAL_RCC_OscConfig+0x274>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a1b      	ldr	r3, [r3, #32]
 8001884:	021b      	lsls	r3, r3, #8
 8001886:	495b      	ldr	r1, [pc, #364]	@ (80019f4 <HAL_RCC_OscConfig+0x274>)
 8001888:	4313      	orrs	r3, r2
 800188a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800188c:	6a3b      	ldr	r3, [r7, #32]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d109      	bne.n	80018a6 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001896:	4618      	mov	r0, r3
 8001898:	f000 fd96 	bl	80023c8 <RCC_SetFlashLatencyFromMSIRange>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e3c5      	b.n	8002032 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018a6:	f000 fccd 	bl	8002244 <HAL_RCC_GetSysClockFreq>
 80018aa:	4602      	mov	r2, r0
 80018ac:	4b51      	ldr	r3, [pc, #324]	@ (80019f4 <HAL_RCC_OscConfig+0x274>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	091b      	lsrs	r3, r3, #4
 80018b2:	f003 030f 	and.w	r3, r3, #15
 80018b6:	4950      	ldr	r1, [pc, #320]	@ (80019f8 <HAL_RCC_OscConfig+0x278>)
 80018b8:	5ccb      	ldrb	r3, [r1, r3]
 80018ba:	f003 031f 	and.w	r3, r3, #31
 80018be:	fa22 f303 	lsr.w	r3, r2, r3
 80018c2:	4a4e      	ldr	r2, [pc, #312]	@ (80019fc <HAL_RCC_OscConfig+0x27c>)
 80018c4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018c6:	4b4e      	ldr	r3, [pc, #312]	@ (8001a00 <HAL_RCC_OscConfig+0x280>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff f962 	bl	8000b94 <HAL_InitTick>
 80018d0:	4603      	mov	r3, r0
 80018d2:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80018d4:	7dfb      	ldrb	r3, [r7, #23]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d052      	beq.n	8001980 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80018da:	7dfb      	ldrb	r3, [r7, #23]
 80018dc:	e3a9      	b.n	8002032 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d032      	beq.n	800194c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018e6:	4b43      	ldr	r3, [pc, #268]	@ (80019f4 <HAL_RCC_OscConfig+0x274>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a42      	ldr	r2, [pc, #264]	@ (80019f4 <HAL_RCC_OscConfig+0x274>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018f2:	f7ff f99f 	bl	8000c34 <HAL_GetTick>
 80018f6:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018fa:	f7ff f99b 	bl	8000c34 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e392      	b.n	8002032 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800190c:	4b39      	ldr	r3, [pc, #228]	@ (80019f4 <HAL_RCC_OscConfig+0x274>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0f0      	beq.n	80018fa <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001918:	4b36      	ldr	r3, [pc, #216]	@ (80019f4 <HAL_RCC_OscConfig+0x274>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a35      	ldr	r2, [pc, #212]	@ (80019f4 <HAL_RCC_OscConfig+0x274>)
 800191e:	f043 0308 	orr.w	r3, r3, #8
 8001922:	6013      	str	r3, [r2, #0]
 8001924:	4b33      	ldr	r3, [pc, #204]	@ (80019f4 <HAL_RCC_OscConfig+0x274>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001930:	4930      	ldr	r1, [pc, #192]	@ (80019f4 <HAL_RCC_OscConfig+0x274>)
 8001932:	4313      	orrs	r3, r2
 8001934:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001936:	4b2f      	ldr	r3, [pc, #188]	@ (80019f4 <HAL_RCC_OscConfig+0x274>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	021b      	lsls	r3, r3, #8
 8001944:	492b      	ldr	r1, [pc, #172]	@ (80019f4 <HAL_RCC_OscConfig+0x274>)
 8001946:	4313      	orrs	r3, r2
 8001948:	604b      	str	r3, [r1, #4]
 800194a:	e01a      	b.n	8001982 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800194c:	4b29      	ldr	r3, [pc, #164]	@ (80019f4 <HAL_RCC_OscConfig+0x274>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a28      	ldr	r2, [pc, #160]	@ (80019f4 <HAL_RCC_OscConfig+0x274>)
 8001952:	f023 0301 	bic.w	r3, r3, #1
 8001956:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001958:	f7ff f96c 	bl	8000c34 <HAL_GetTick>
 800195c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001960:	f7ff f968 	bl	8000c34 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e35f      	b.n	8002032 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001972:	4b20      	ldr	r3, [pc, #128]	@ (80019f4 <HAL_RCC_OscConfig+0x274>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1f0      	bne.n	8001960 <HAL_RCC_OscConfig+0x1e0>
 800197e:	e000      	b.n	8001982 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001980:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	2b00      	cmp	r3, #0
 800198c:	d073      	beq.n	8001a76 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800198e:	6a3b      	ldr	r3, [r7, #32]
 8001990:	2b08      	cmp	r3, #8
 8001992:	d005      	beq.n	80019a0 <HAL_RCC_OscConfig+0x220>
 8001994:	6a3b      	ldr	r3, [r7, #32]
 8001996:	2b0c      	cmp	r3, #12
 8001998:	d10e      	bne.n	80019b8 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	2b03      	cmp	r3, #3
 800199e:	d10b      	bne.n	80019b8 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a0:	4b14      	ldr	r3, [pc, #80]	@ (80019f4 <HAL_RCC_OscConfig+0x274>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d063      	beq.n	8001a74 <HAL_RCC_OscConfig+0x2f4>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d15f      	bne.n	8001a74 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e33c      	b.n	8002032 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019c0:	d106      	bne.n	80019d0 <HAL_RCC_OscConfig+0x250>
 80019c2:	4b0c      	ldr	r3, [pc, #48]	@ (80019f4 <HAL_RCC_OscConfig+0x274>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a0b      	ldr	r2, [pc, #44]	@ (80019f4 <HAL_RCC_OscConfig+0x274>)
 80019c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	e025      	b.n	8001a1c <HAL_RCC_OscConfig+0x29c>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019d8:	d114      	bne.n	8001a04 <HAL_RCC_OscConfig+0x284>
 80019da:	4b06      	ldr	r3, [pc, #24]	@ (80019f4 <HAL_RCC_OscConfig+0x274>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a05      	ldr	r2, [pc, #20]	@ (80019f4 <HAL_RCC_OscConfig+0x274>)
 80019e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	4b03      	ldr	r3, [pc, #12]	@ (80019f4 <HAL_RCC_OscConfig+0x274>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a02      	ldr	r2, [pc, #8]	@ (80019f4 <HAL_RCC_OscConfig+0x274>)
 80019ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	e013      	b.n	8001a1c <HAL_RCC_OscConfig+0x29c>
 80019f4:	40021000 	.word	0x40021000
 80019f8:	08003da0 	.word	0x08003da0
 80019fc:	20000000 	.word	0x20000000
 8001a00:	20000004 	.word	0x20000004
 8001a04:	4b8f      	ldr	r3, [pc, #572]	@ (8001c44 <HAL_RCC_OscConfig+0x4c4>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a8e      	ldr	r2, [pc, #568]	@ (8001c44 <HAL_RCC_OscConfig+0x4c4>)
 8001a0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a0e:	6013      	str	r3, [r2, #0]
 8001a10:	4b8c      	ldr	r3, [pc, #560]	@ (8001c44 <HAL_RCC_OscConfig+0x4c4>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a8b      	ldr	r2, [pc, #556]	@ (8001c44 <HAL_RCC_OscConfig+0x4c4>)
 8001a16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d013      	beq.n	8001a4c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a24:	f7ff f906 	bl	8000c34 <HAL_GetTick>
 8001a28:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a2c:	f7ff f902 	bl	8000c34 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b64      	cmp	r3, #100	@ 0x64
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e2f9      	b.n	8002032 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a3e:	4b81      	ldr	r3, [pc, #516]	@ (8001c44 <HAL_RCC_OscConfig+0x4c4>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0f0      	beq.n	8001a2c <HAL_RCC_OscConfig+0x2ac>
 8001a4a:	e014      	b.n	8001a76 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4c:	f7ff f8f2 	bl	8000c34 <HAL_GetTick>
 8001a50:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a54:	f7ff f8ee 	bl	8000c34 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b64      	cmp	r3, #100	@ 0x64
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e2e5      	b.n	8002032 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a66:	4b77      	ldr	r3, [pc, #476]	@ (8001c44 <HAL_RCC_OscConfig+0x4c4>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_OscConfig+0x2d4>
 8001a72:	e000      	b.n	8001a76 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d060      	beq.n	8001b44 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a82:	6a3b      	ldr	r3, [r7, #32]
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d005      	beq.n	8001a94 <HAL_RCC_OscConfig+0x314>
 8001a88:	6a3b      	ldr	r3, [r7, #32]
 8001a8a:	2b0c      	cmp	r3, #12
 8001a8c:	d119      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d116      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a94:	4b6b      	ldr	r3, [pc, #428]	@ (8001c44 <HAL_RCC_OscConfig+0x4c4>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d005      	beq.n	8001aac <HAL_RCC_OscConfig+0x32c>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d101      	bne.n	8001aac <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e2c2      	b.n	8002032 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aac:	4b65      	ldr	r3, [pc, #404]	@ (8001c44 <HAL_RCC_OscConfig+0x4c4>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	061b      	lsls	r3, r3, #24
 8001aba:	4962      	ldr	r1, [pc, #392]	@ (8001c44 <HAL_RCC_OscConfig+0x4c4>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ac0:	e040      	b.n	8001b44 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d023      	beq.n	8001b12 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aca:	4b5e      	ldr	r3, [pc, #376]	@ (8001c44 <HAL_RCC_OscConfig+0x4c4>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a5d      	ldr	r2, [pc, #372]	@ (8001c44 <HAL_RCC_OscConfig+0x4c4>)
 8001ad0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ad4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad6:	f7ff f8ad 	bl	8000c34 <HAL_GetTick>
 8001ada:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ade:	f7ff f8a9 	bl	8000c34 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e2a0      	b.n	8002032 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af0:	4b54      	ldr	r3, [pc, #336]	@ (8001c44 <HAL_RCC_OscConfig+0x4c4>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0f0      	beq.n	8001ade <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001afc:	4b51      	ldr	r3, [pc, #324]	@ (8001c44 <HAL_RCC_OscConfig+0x4c4>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	061b      	lsls	r3, r3, #24
 8001b0a:	494e      	ldr	r1, [pc, #312]	@ (8001c44 <HAL_RCC_OscConfig+0x4c4>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	604b      	str	r3, [r1, #4]
 8001b10:	e018      	b.n	8001b44 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b12:	4b4c      	ldr	r3, [pc, #304]	@ (8001c44 <HAL_RCC_OscConfig+0x4c4>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a4b      	ldr	r2, [pc, #300]	@ (8001c44 <HAL_RCC_OscConfig+0x4c4>)
 8001b18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1e:	f7ff f889 	bl	8000c34 <HAL_GetTick>
 8001b22:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b26:	f7ff f885 	bl	8000c34 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e27c      	b.n	8002032 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b38:	4b42      	ldr	r3, [pc, #264]	@ (8001c44 <HAL_RCC_OscConfig+0x4c4>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1f0      	bne.n	8001b26 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0308 	and.w	r3, r3, #8
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f000 8082 	beq.w	8001c56 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d05f      	beq.n	8001c1a <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001b5a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c44 <HAL_RCC_OscConfig+0x4c4>)
 8001b5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b60:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	699a      	ldr	r2, [r3, #24]
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	f003 0310 	and.w	r3, r3, #16
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d037      	beq.n	8001be0 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d006      	beq.n	8001b88 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d101      	bne.n	8001b88 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e254      	b.n	8002032 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d01b      	beq.n	8001bca <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8001b92:	4b2c      	ldr	r3, [pc, #176]	@ (8001c44 <HAL_RCC_OscConfig+0x4c4>)
 8001b94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b98:	4a2a      	ldr	r2, [pc, #168]	@ (8001c44 <HAL_RCC_OscConfig+0x4c4>)
 8001b9a:	f023 0301 	bic.w	r3, r3, #1
 8001b9e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ba2:	f7ff f847 	bl	8000c34 <HAL_GetTick>
 8001ba6:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001baa:	f7ff f843 	bl	8000c34 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b11      	cmp	r3, #17
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e23a      	b.n	8002032 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bbc:	4b21      	ldr	r3, [pc, #132]	@ (8001c44 <HAL_RCC_OscConfig+0x4c4>)
 8001bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1ef      	bne.n	8001baa <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001bca:	4b1e      	ldr	r3, [pc, #120]	@ (8001c44 <HAL_RCC_OscConfig+0x4c4>)
 8001bcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bd0:	f023 0210 	bic.w	r2, r3, #16
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	491a      	ldr	r1, [pc, #104]	@ (8001c44 <HAL_RCC_OscConfig+0x4c4>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001be0:	4b18      	ldr	r3, [pc, #96]	@ (8001c44 <HAL_RCC_OscConfig+0x4c4>)
 8001be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001be6:	4a17      	ldr	r2, [pc, #92]	@ (8001c44 <HAL_RCC_OscConfig+0x4c4>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf0:	f7ff f820 	bl	8000c34 <HAL_GetTick>
 8001bf4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf8:	f7ff f81c 	bl	8000c34 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b11      	cmp	r3, #17
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e213      	b.n	8002032 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c44 <HAL_RCC_OscConfig+0x4c4>)
 8001c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0ef      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x478>
 8001c18:	e01d      	b.n	8001c56 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c44 <HAL_RCC_OscConfig+0x4c4>)
 8001c1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c20:	4a08      	ldr	r2, [pc, #32]	@ (8001c44 <HAL_RCC_OscConfig+0x4c4>)
 8001c22:	f023 0301 	bic.w	r3, r3, #1
 8001c26:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c2a:	f7ff f803 	bl	8000c34 <HAL_GetTick>
 8001c2e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c30:	e00a      	b.n	8001c48 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c32:	f7fe ffff 	bl	8000c34 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b11      	cmp	r3, #17
 8001c3e:	d903      	bls.n	8001c48 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e1f6      	b.n	8002032 <HAL_RCC_OscConfig+0x8b2>
 8001c44:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c48:	4ba9      	ldr	r3, [pc, #676]	@ (8001ef0 <HAL_RCC_OscConfig+0x770>)
 8001c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1ed      	bne.n	8001c32 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0304 	and.w	r3, r3, #4
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 80bd 	beq.w	8001dde <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c64:	2300      	movs	r3, #0
 8001c66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c6a:	4ba1      	ldr	r3, [pc, #644]	@ (8001ef0 <HAL_RCC_OscConfig+0x770>)
 8001c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10e      	bne.n	8001c94 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c76:	4b9e      	ldr	r3, [pc, #632]	@ (8001ef0 <HAL_RCC_OscConfig+0x770>)
 8001c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c7a:	4a9d      	ldr	r2, [pc, #628]	@ (8001ef0 <HAL_RCC_OscConfig+0x770>)
 8001c7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c80:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c82:	4b9b      	ldr	r3, [pc, #620]	@ (8001ef0 <HAL_RCC_OscConfig+0x770>)
 8001c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c94:	4b97      	ldr	r3, [pc, #604]	@ (8001ef4 <HAL_RCC_OscConfig+0x774>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d118      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ca0:	4b94      	ldr	r3, [pc, #592]	@ (8001ef4 <HAL_RCC_OscConfig+0x774>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a93      	ldr	r2, [pc, #588]	@ (8001ef4 <HAL_RCC_OscConfig+0x774>)
 8001ca6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001caa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cac:	f7fe ffc2 	bl	8000c34 <HAL_GetTick>
 8001cb0:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb4:	f7fe ffbe 	bl	8000c34 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e1b5      	b.n	8002032 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cc6:	4b8b      	ldr	r3, [pc, #556]	@ (8001ef4 <HAL_RCC_OscConfig+0x774>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0f0      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d02c      	beq.n	8001d38 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001cde:	4b84      	ldr	r3, [pc, #528]	@ (8001ef0 <HAL_RCC_OscConfig+0x770>)
 8001ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ce4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cf0:	497f      	ldr	r1, [pc, #508]	@ (8001ef0 <HAL_RCC_OscConfig+0x770>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d010      	beq.n	8001d26 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001d04:	4b7a      	ldr	r3, [pc, #488]	@ (8001ef0 <HAL_RCC_OscConfig+0x770>)
 8001d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d0a:	4a79      	ldr	r2, [pc, #484]	@ (8001ef0 <HAL_RCC_OscConfig+0x770>)
 8001d0c:	f043 0304 	orr.w	r3, r3, #4
 8001d10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d14:	4b76      	ldr	r3, [pc, #472]	@ (8001ef0 <HAL_RCC_OscConfig+0x770>)
 8001d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d1a:	4a75      	ldr	r2, [pc, #468]	@ (8001ef0 <HAL_RCC_OscConfig+0x770>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d24:	e018      	b.n	8001d58 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d26:	4b72      	ldr	r3, [pc, #456]	@ (8001ef0 <HAL_RCC_OscConfig+0x770>)
 8001d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d2c:	4a70      	ldr	r2, [pc, #448]	@ (8001ef0 <HAL_RCC_OscConfig+0x770>)
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d36:	e00f      	b.n	8001d58 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d38:	4b6d      	ldr	r3, [pc, #436]	@ (8001ef0 <HAL_RCC_OscConfig+0x770>)
 8001d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d3e:	4a6c      	ldr	r2, [pc, #432]	@ (8001ef0 <HAL_RCC_OscConfig+0x770>)
 8001d40:	f023 0301 	bic.w	r3, r3, #1
 8001d44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001d48:	4b69      	ldr	r3, [pc, #420]	@ (8001ef0 <HAL_RCC_OscConfig+0x770>)
 8001d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d4e:	4a68      	ldr	r2, [pc, #416]	@ (8001ef0 <HAL_RCC_OscConfig+0x770>)
 8001d50:	f023 0304 	bic.w	r3, r3, #4
 8001d54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d016      	beq.n	8001d8e <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d60:	f7fe ff68 	bl	8000c34 <HAL_GetTick>
 8001d64:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d66:	e00a      	b.n	8001d7e <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d68:	f7fe ff64 	bl	8000c34 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e159      	b.n	8002032 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d7e:	4b5c      	ldr	r3, [pc, #368]	@ (8001ef0 <HAL_RCC_OscConfig+0x770>)
 8001d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0ed      	beq.n	8001d68 <HAL_RCC_OscConfig+0x5e8>
 8001d8c:	e01d      	b.n	8001dca <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d8e:	f7fe ff51 	bl	8000c34 <HAL_GetTick>
 8001d92:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d94:	e00a      	b.n	8001dac <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d96:	f7fe ff4d 	bl	8000c34 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e142      	b.n	8002032 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dac:	4b50      	ldr	r3, [pc, #320]	@ (8001ef0 <HAL_RCC_OscConfig+0x770>)
 8001dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1ed      	bne.n	8001d96 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001dba:	4b4d      	ldr	r3, [pc, #308]	@ (8001ef0 <HAL_RCC_OscConfig+0x770>)
 8001dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dc0:	4a4b      	ldr	r2, [pc, #300]	@ (8001ef0 <HAL_RCC_OscConfig+0x770>)
 8001dc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001dc6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d105      	bne.n	8001dde <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dd2:	4b47      	ldr	r3, [pc, #284]	@ (8001ef0 <HAL_RCC_OscConfig+0x770>)
 8001dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd6:	4a46      	ldr	r2, [pc, #280]	@ (8001ef0 <HAL_RCC_OscConfig+0x770>)
 8001dd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ddc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0320 	and.w	r3, r3, #32
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d03c      	beq.n	8001e64 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d01c      	beq.n	8001e2c <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001df2:	4b3f      	ldr	r3, [pc, #252]	@ (8001ef0 <HAL_RCC_OscConfig+0x770>)
 8001df4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001df8:	4a3d      	ldr	r2, [pc, #244]	@ (8001ef0 <HAL_RCC_OscConfig+0x770>)
 8001dfa:	f043 0301 	orr.w	r3, r3, #1
 8001dfe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e02:	f7fe ff17 	bl	8000c34 <HAL_GetTick>
 8001e06:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e0a:	f7fe ff13 	bl	8000c34 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e10a      	b.n	8002032 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e1c:	4b34      	ldr	r3, [pc, #208]	@ (8001ef0 <HAL_RCC_OscConfig+0x770>)
 8001e1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0ef      	beq.n	8001e0a <HAL_RCC_OscConfig+0x68a>
 8001e2a:	e01b      	b.n	8001e64 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e2c:	4b30      	ldr	r3, [pc, #192]	@ (8001ef0 <HAL_RCC_OscConfig+0x770>)
 8001e2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e32:	4a2f      	ldr	r2, [pc, #188]	@ (8001ef0 <HAL_RCC_OscConfig+0x770>)
 8001e34:	f023 0301 	bic.w	r3, r3, #1
 8001e38:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e3c:	f7fe fefa 	bl	8000c34 <HAL_GetTick>
 8001e40:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e44:	f7fe fef6 	bl	8000c34 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e0ed      	b.n	8002032 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e56:	4b26      	ldr	r3, [pc, #152]	@ (8001ef0 <HAL_RCC_OscConfig+0x770>)
 8001e58:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1ef      	bne.n	8001e44 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f000 80e1 	beq.w	8002030 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	f040 80b5 	bne.w	8001fe2 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e78:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef0 <HAL_RCC_OscConfig+0x770>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	f003 0203 	and.w	r2, r3, #3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d124      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e96:	3b01      	subs	r3, #1
 8001e98:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d11b      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ea8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d113      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eb8:	085b      	lsrs	r3, r3, #1
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d109      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ecc:	085b      	lsrs	r3, r3, #1
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d05f      	beq.n	8001f96 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ed6:	6a3b      	ldr	r3, [r7, #32]
 8001ed8:	2b0c      	cmp	r3, #12
 8001eda:	d05a      	beq.n	8001f92 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001edc:	4b04      	ldr	r3, [pc, #16]	@ (8001ef0 <HAL_RCC_OscConfig+0x770>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a03      	ldr	r2, [pc, #12]	@ (8001ef0 <HAL_RCC_OscConfig+0x770>)
 8001ee2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ee6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ee8:	f7fe fea4 	bl	8000c34 <HAL_GetTick>
 8001eec:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eee:	e00c      	b.n	8001f0a <HAL_RCC_OscConfig+0x78a>
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef8:	f7fe fe9c 	bl	8000c34 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e093      	b.n	8002032 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f0a:	4b4c      	ldr	r3, [pc, #304]	@ (800203c <HAL_RCC_OscConfig+0x8bc>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f0      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f16:	4b49      	ldr	r3, [pc, #292]	@ (800203c <HAL_RCC_OscConfig+0x8bc>)
 8001f18:	68da      	ldr	r2, [r3, #12]
 8001f1a:	4b49      	ldr	r3, [pc, #292]	@ (8002040 <HAL_RCC_OscConfig+0x8c0>)
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001f26:	3a01      	subs	r2, #1
 8001f28:	0112      	lsls	r2, r2, #4
 8001f2a:	4311      	orrs	r1, r2
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001f30:	0212      	lsls	r2, r2, #8
 8001f32:	4311      	orrs	r1, r2
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001f38:	0852      	lsrs	r2, r2, #1
 8001f3a:	3a01      	subs	r2, #1
 8001f3c:	0552      	lsls	r2, r2, #21
 8001f3e:	4311      	orrs	r1, r2
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001f44:	0852      	lsrs	r2, r2, #1
 8001f46:	3a01      	subs	r2, #1
 8001f48:	0652      	lsls	r2, r2, #25
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	493b      	ldr	r1, [pc, #236]	@ (800203c <HAL_RCC_OscConfig+0x8bc>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f52:	4b3a      	ldr	r3, [pc, #232]	@ (800203c <HAL_RCC_OscConfig+0x8bc>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a39      	ldr	r2, [pc, #228]	@ (800203c <HAL_RCC_OscConfig+0x8bc>)
 8001f58:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f5c:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f5e:	4b37      	ldr	r3, [pc, #220]	@ (800203c <HAL_RCC_OscConfig+0x8bc>)
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	4a36      	ldr	r2, [pc, #216]	@ (800203c <HAL_RCC_OscConfig+0x8bc>)
 8001f64:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f68:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f6a:	f7fe fe63 	bl	8000c34 <HAL_GetTick>
 8001f6e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f72:	f7fe fe5f 	bl	8000c34 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e056      	b.n	8002032 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f84:	4b2d      	ldr	r3, [pc, #180]	@ (800203c <HAL_RCC_OscConfig+0x8bc>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0f0      	beq.n	8001f72 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f90:	e04e      	b.n	8002030 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e04d      	b.n	8002032 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f96:	4b29      	ldr	r3, [pc, #164]	@ (800203c <HAL_RCC_OscConfig+0x8bc>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d146      	bne.n	8002030 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001fa2:	4b26      	ldr	r3, [pc, #152]	@ (800203c <HAL_RCC_OscConfig+0x8bc>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a25      	ldr	r2, [pc, #148]	@ (800203c <HAL_RCC_OscConfig+0x8bc>)
 8001fa8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fac:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fae:	4b23      	ldr	r3, [pc, #140]	@ (800203c <HAL_RCC_OscConfig+0x8bc>)
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	4a22      	ldr	r2, [pc, #136]	@ (800203c <HAL_RCC_OscConfig+0x8bc>)
 8001fb4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fb8:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fba:	f7fe fe3b 	bl	8000c34 <HAL_GetTick>
 8001fbe:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc2:	f7fe fe37 	bl	8000c34 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e02e      	b.n	8002032 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd4:	4b19      	ldr	r3, [pc, #100]	@ (800203c <HAL_RCC_OscConfig+0x8bc>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0f0      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x842>
 8001fe0:	e026      	b.n	8002030 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fe2:	6a3b      	ldr	r3, [r7, #32]
 8001fe4:	2b0c      	cmp	r3, #12
 8001fe6:	d021      	beq.n	800202c <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe8:	4b14      	ldr	r3, [pc, #80]	@ (800203c <HAL_RCC_OscConfig+0x8bc>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a13      	ldr	r2, [pc, #76]	@ (800203c <HAL_RCC_OscConfig+0x8bc>)
 8001fee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ff2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff4:	f7fe fe1e 	bl	8000c34 <HAL_GetTick>
 8001ff8:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ffc:	f7fe fe1a 	bl	8000c34 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e011      	b.n	8002032 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800200e:	4b0b      	ldr	r3, [pc, #44]	@ (800203c <HAL_RCC_OscConfig+0x8bc>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f0      	bne.n	8001ffc <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800201a:	4b08      	ldr	r3, [pc, #32]	@ (800203c <HAL_RCC_OscConfig+0x8bc>)
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	4a07      	ldr	r2, [pc, #28]	@ (800203c <HAL_RCC_OscConfig+0x8bc>)
 8002020:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8002024:	f023 0303 	bic.w	r3, r3, #3
 8002028:	60d3      	str	r3, [r2, #12]
 800202a:	e001      	b.n	8002030 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e000      	b.n	8002032 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3728      	adds	r7, #40	@ 0x28
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40021000 	.word	0x40021000
 8002040:	f99f808c 	.word	0xf99f808c

08002044 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e0e7      	b.n	8002228 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002058:	4b75      	ldr	r3, [pc, #468]	@ (8002230 <HAL_RCC_ClockConfig+0x1ec>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	429a      	cmp	r2, r3
 8002064:	d910      	bls.n	8002088 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002066:	4b72      	ldr	r3, [pc, #456]	@ (8002230 <HAL_RCC_ClockConfig+0x1ec>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f023 0207 	bic.w	r2, r3, #7
 800206e:	4970      	ldr	r1, [pc, #448]	@ (8002230 <HAL_RCC_ClockConfig+0x1ec>)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	4313      	orrs	r3, r2
 8002074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002076:	4b6e      	ldr	r3, [pc, #440]	@ (8002230 <HAL_RCC_ClockConfig+0x1ec>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	429a      	cmp	r2, r3
 8002082:	d001      	beq.n	8002088 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e0cf      	b.n	8002228 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d010      	beq.n	80020b6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	4b66      	ldr	r3, [pc, #408]	@ (8002234 <HAL_RCC_ClockConfig+0x1f0>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d908      	bls.n	80020b6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a4:	4b63      	ldr	r3, [pc, #396]	@ (8002234 <HAL_RCC_ClockConfig+0x1f0>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	4960      	ldr	r1, [pc, #384]	@ (8002234 <HAL_RCC_ClockConfig+0x1f0>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d04c      	beq.n	800215c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b03      	cmp	r3, #3
 80020c8:	d107      	bne.n	80020da <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ca:	4b5a      	ldr	r3, [pc, #360]	@ (8002234 <HAL_RCC_ClockConfig+0x1f0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d121      	bne.n	800211a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e0a6      	b.n	8002228 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d107      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020e2:	4b54      	ldr	r3, [pc, #336]	@ (8002234 <HAL_RCC_ClockConfig+0x1f0>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d115      	bne.n	800211a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e09a      	b.n	8002228 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d107      	bne.n	800210a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020fa:	4b4e      	ldr	r3, [pc, #312]	@ (8002234 <HAL_RCC_ClockConfig+0x1f0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d109      	bne.n	800211a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e08e      	b.n	8002228 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800210a:	4b4a      	ldr	r3, [pc, #296]	@ (8002234 <HAL_RCC_ClockConfig+0x1f0>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e086      	b.n	8002228 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800211a:	4b46      	ldr	r3, [pc, #280]	@ (8002234 <HAL_RCC_ClockConfig+0x1f0>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f023 0203 	bic.w	r2, r3, #3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	4943      	ldr	r1, [pc, #268]	@ (8002234 <HAL_RCC_ClockConfig+0x1f0>)
 8002128:	4313      	orrs	r3, r2
 800212a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800212c:	f7fe fd82 	bl	8000c34 <HAL_GetTick>
 8002130:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002132:	e00a      	b.n	800214a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002134:	f7fe fd7e 	bl	8000c34 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002142:	4293      	cmp	r3, r2
 8002144:	d901      	bls.n	800214a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e06e      	b.n	8002228 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214a:	4b3a      	ldr	r3, [pc, #232]	@ (8002234 <HAL_RCC_ClockConfig+0x1f0>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 020c 	and.w	r2, r3, #12
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	429a      	cmp	r2, r3
 800215a:	d1eb      	bne.n	8002134 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d010      	beq.n	800218a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	4b31      	ldr	r3, [pc, #196]	@ (8002234 <HAL_RCC_ClockConfig+0x1f0>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002174:	429a      	cmp	r2, r3
 8002176:	d208      	bcs.n	800218a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002178:	4b2e      	ldr	r3, [pc, #184]	@ (8002234 <HAL_RCC_ClockConfig+0x1f0>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	492b      	ldr	r1, [pc, #172]	@ (8002234 <HAL_RCC_ClockConfig+0x1f0>)
 8002186:	4313      	orrs	r3, r2
 8002188:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800218a:	4b29      	ldr	r3, [pc, #164]	@ (8002230 <HAL_RCC_ClockConfig+0x1ec>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	429a      	cmp	r2, r3
 8002196:	d210      	bcs.n	80021ba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002198:	4b25      	ldr	r3, [pc, #148]	@ (8002230 <HAL_RCC_ClockConfig+0x1ec>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f023 0207 	bic.w	r2, r3, #7
 80021a0:	4923      	ldr	r1, [pc, #140]	@ (8002230 <HAL_RCC_ClockConfig+0x1ec>)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a8:	4b21      	ldr	r3, [pc, #132]	@ (8002230 <HAL_RCC_ClockConfig+0x1ec>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d001      	beq.n	80021ba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e036      	b.n	8002228 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0304 	and.w	r3, r3, #4
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d008      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002234 <HAL_RCC_ClockConfig+0x1f0>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	4918      	ldr	r1, [pc, #96]	@ (8002234 <HAL_RCC_ClockConfig+0x1f0>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0308 	and.w	r3, r3, #8
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d009      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021e4:	4b13      	ldr	r3, [pc, #76]	@ (8002234 <HAL_RCC_ClockConfig+0x1f0>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	4910      	ldr	r1, [pc, #64]	@ (8002234 <HAL_RCC_ClockConfig+0x1f0>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021f8:	f000 f824 	bl	8002244 <HAL_RCC_GetSysClockFreq>
 80021fc:	4602      	mov	r2, r0
 80021fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002234 <HAL_RCC_ClockConfig+0x1f0>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	091b      	lsrs	r3, r3, #4
 8002204:	f003 030f 	and.w	r3, r3, #15
 8002208:	490b      	ldr	r1, [pc, #44]	@ (8002238 <HAL_RCC_ClockConfig+0x1f4>)
 800220a:	5ccb      	ldrb	r3, [r1, r3]
 800220c:	f003 031f 	and.w	r3, r3, #31
 8002210:	fa22 f303 	lsr.w	r3, r2, r3
 8002214:	4a09      	ldr	r2, [pc, #36]	@ (800223c <HAL_RCC_ClockConfig+0x1f8>)
 8002216:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002218:	4b09      	ldr	r3, [pc, #36]	@ (8002240 <HAL_RCC_ClockConfig+0x1fc>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f7fe fcb9 	bl	8000b94 <HAL_InitTick>
 8002222:	4603      	mov	r3, r0
 8002224:	72fb      	strb	r3, [r7, #11]

  return status;
 8002226:	7afb      	ldrb	r3, [r7, #11]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40022000 	.word	0x40022000
 8002234:	40021000 	.word	0x40021000
 8002238:	08003da0 	.word	0x08003da0
 800223c:	20000000 	.word	0x20000000
 8002240:	20000004 	.word	0x20000004

08002244 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002244:	b480      	push	{r7}
 8002246:	b089      	sub	sp, #36	@ 0x24
 8002248:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800224a:	2300      	movs	r3, #0
 800224c:	61fb      	str	r3, [r7, #28]
 800224e:	2300      	movs	r3, #0
 8002250:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002252:	4b3e      	ldr	r3, [pc, #248]	@ (800234c <HAL_RCC_GetSysClockFreq+0x108>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 030c 	and.w	r3, r3, #12
 800225a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800225c:	4b3b      	ldr	r3, [pc, #236]	@ (800234c <HAL_RCC_GetSysClockFreq+0x108>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d005      	beq.n	8002278 <HAL_RCC_GetSysClockFreq+0x34>
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	2b0c      	cmp	r3, #12
 8002270:	d121      	bne.n	80022b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d11e      	bne.n	80022b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002278:	4b34      	ldr	r3, [pc, #208]	@ (800234c <HAL_RCC_GetSysClockFreq+0x108>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0308 	and.w	r3, r3, #8
 8002280:	2b00      	cmp	r3, #0
 8002282:	d107      	bne.n	8002294 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002284:	4b31      	ldr	r3, [pc, #196]	@ (800234c <HAL_RCC_GetSysClockFreq+0x108>)
 8002286:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800228a:	0a1b      	lsrs	r3, r3, #8
 800228c:	f003 030f 	and.w	r3, r3, #15
 8002290:	61fb      	str	r3, [r7, #28]
 8002292:	e005      	b.n	80022a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002294:	4b2d      	ldr	r3, [pc, #180]	@ (800234c <HAL_RCC_GetSysClockFreq+0x108>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	091b      	lsrs	r3, r3, #4
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80022a0:	4a2b      	ldr	r2, [pc, #172]	@ (8002350 <HAL_RCC_GetSysClockFreq+0x10c>)
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d10d      	bne.n	80022cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022b4:	e00a      	b.n	80022cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	2b04      	cmp	r3, #4
 80022ba:	d102      	bne.n	80022c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022bc:	4b25      	ldr	r3, [pc, #148]	@ (8002354 <HAL_RCC_GetSysClockFreq+0x110>)
 80022be:	61bb      	str	r3, [r7, #24]
 80022c0:	e004      	b.n	80022cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	d101      	bne.n	80022cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022c8:	4b22      	ldr	r3, [pc, #136]	@ (8002354 <HAL_RCC_GetSysClockFreq+0x110>)
 80022ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	2b0c      	cmp	r3, #12
 80022d0:	d134      	bne.n	800233c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022d2:	4b1e      	ldr	r3, [pc, #120]	@ (800234c <HAL_RCC_GetSysClockFreq+0x108>)
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d003      	beq.n	80022ea <HAL_RCC_GetSysClockFreq+0xa6>
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2b03      	cmp	r3, #3
 80022e6:	d003      	beq.n	80022f0 <HAL_RCC_GetSysClockFreq+0xac>
 80022e8:	e005      	b.n	80022f6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80022ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002354 <HAL_RCC_GetSysClockFreq+0x110>)
 80022ec:	617b      	str	r3, [r7, #20]
      break;
 80022ee:	e005      	b.n	80022fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80022f0:	4b18      	ldr	r3, [pc, #96]	@ (8002354 <HAL_RCC_GetSysClockFreq+0x110>)
 80022f2:	617b      	str	r3, [r7, #20]
      break;
 80022f4:	e002      	b.n	80022fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	617b      	str	r3, [r7, #20]
      break;
 80022fa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022fc:	4b13      	ldr	r3, [pc, #76]	@ (800234c <HAL_RCC_GetSysClockFreq+0x108>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	091b      	lsrs	r3, r3, #4
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	3301      	adds	r3, #1
 8002308:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800230a:	4b10      	ldr	r3, [pc, #64]	@ (800234c <HAL_RCC_GetSysClockFreq+0x108>)
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	0a1b      	lsrs	r3, r3, #8
 8002310:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	fb03 f202 	mul.w	r2, r3, r2
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002320:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002322:	4b0a      	ldr	r3, [pc, #40]	@ (800234c <HAL_RCC_GetSysClockFreq+0x108>)
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	0e5b      	lsrs	r3, r3, #25
 8002328:	f003 0303 	and.w	r3, r3, #3
 800232c:	3301      	adds	r3, #1
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	fbb2 f3f3 	udiv	r3, r2, r3
 800233a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800233c:	69bb      	ldr	r3, [r7, #24]
}
 800233e:	4618      	mov	r0, r3
 8002340:	3724      	adds	r7, #36	@ 0x24
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	40021000 	.word	0x40021000
 8002350:	08003db8 	.word	0x08003db8
 8002354:	00f42400 	.word	0x00f42400

08002358 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800235c:	4b03      	ldr	r3, [pc, #12]	@ (800236c <HAL_RCC_GetHCLKFreq+0x14>)
 800235e:	681b      	ldr	r3, [r3, #0]
}
 8002360:	4618      	mov	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	20000000 	.word	0x20000000

08002370 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002374:	f7ff fff0 	bl	8002358 <HAL_RCC_GetHCLKFreq>
 8002378:	4602      	mov	r2, r0
 800237a:	4b06      	ldr	r3, [pc, #24]	@ (8002394 <HAL_RCC_GetPCLK1Freq+0x24>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	0a1b      	lsrs	r3, r3, #8
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	4904      	ldr	r1, [pc, #16]	@ (8002398 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002386:	5ccb      	ldrb	r3, [r1, r3]
 8002388:	f003 031f 	and.w	r3, r3, #31
 800238c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002390:	4618      	mov	r0, r3
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40021000 	.word	0x40021000
 8002398:	08003db0 	.word	0x08003db0

0800239c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80023a0:	f7ff ffda 	bl	8002358 <HAL_RCC_GetHCLKFreq>
 80023a4:	4602      	mov	r2, r0
 80023a6:	4b06      	ldr	r3, [pc, #24]	@ (80023c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	0adb      	lsrs	r3, r3, #11
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	4904      	ldr	r1, [pc, #16]	@ (80023c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80023b2:	5ccb      	ldrb	r3, [r1, r3]
 80023b4:	f003 031f 	and.w	r3, r3, #31
 80023b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023bc:	4618      	mov	r0, r3
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40021000 	.word	0x40021000
 80023c4:	08003db0 	.word	0x08003db0

080023c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80023d0:	2300      	movs	r3, #0
 80023d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80023d4:	4b2a      	ldr	r3, [pc, #168]	@ (8002480 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d003      	beq.n	80023e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80023e0:	f7ff f96a 	bl	80016b8 <HAL_PWREx_GetVoltageRange>
 80023e4:	6178      	str	r0, [r7, #20]
 80023e6:	e014      	b.n	8002412 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80023e8:	4b25      	ldr	r3, [pc, #148]	@ (8002480 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ec:	4a24      	ldr	r2, [pc, #144]	@ (8002480 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80023f4:	4b22      	ldr	r3, [pc, #136]	@ (8002480 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002400:	f7ff f95a 	bl	80016b8 <HAL_PWREx_GetVoltageRange>
 8002404:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002406:	4b1e      	ldr	r3, [pc, #120]	@ (8002480 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800240a:	4a1d      	ldr	r2, [pc, #116]	@ (8002480 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800240c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002410:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002418:	d10b      	bne.n	8002432 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b80      	cmp	r3, #128	@ 0x80
 800241e:	d919      	bls.n	8002454 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2ba0      	cmp	r3, #160	@ 0xa0
 8002424:	d902      	bls.n	800242c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002426:	2302      	movs	r3, #2
 8002428:	613b      	str	r3, [r7, #16]
 800242a:	e013      	b.n	8002454 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800242c:	2301      	movs	r3, #1
 800242e:	613b      	str	r3, [r7, #16]
 8002430:	e010      	b.n	8002454 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b80      	cmp	r3, #128	@ 0x80
 8002436:	d902      	bls.n	800243e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002438:	2303      	movs	r3, #3
 800243a:	613b      	str	r3, [r7, #16]
 800243c:	e00a      	b.n	8002454 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2b80      	cmp	r3, #128	@ 0x80
 8002442:	d102      	bne.n	800244a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002444:	2302      	movs	r3, #2
 8002446:	613b      	str	r3, [r7, #16]
 8002448:	e004      	b.n	8002454 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b70      	cmp	r3, #112	@ 0x70
 800244e:	d101      	bne.n	8002454 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002450:	2301      	movs	r3, #1
 8002452:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002454:	4b0b      	ldr	r3, [pc, #44]	@ (8002484 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f023 0207 	bic.w	r2, r3, #7
 800245c:	4909      	ldr	r1, [pc, #36]	@ (8002484 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	4313      	orrs	r3, r2
 8002462:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002464:	4b07      	ldr	r3, [pc, #28]	@ (8002484 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	429a      	cmp	r2, r3
 8002470:	d001      	beq.n	8002476 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e000      	b.n	8002478 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3718      	adds	r7, #24
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40021000 	.word	0x40021000
 8002484:	40022000 	.word	0x40022000

08002488 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002490:	2300      	movs	r3, #0
 8002492:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002494:	2300      	movs	r3, #0
 8002496:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 809e 	beq.w	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024a6:	2300      	movs	r3, #0
 80024a8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024aa:	4b46      	ldr	r3, [pc, #280]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80024ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x32>
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x34>
 80024ba:	2300      	movs	r3, #0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00d      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024c0:	4b40      	ldr	r3, [pc, #256]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80024c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c4:	4a3f      	ldr	r2, [pc, #252]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80024c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80024cc:	4b3d      	ldr	r3, [pc, #244]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80024ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024d8:	2301      	movs	r3, #1
 80024da:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024dc:	4b3a      	ldr	r3, [pc, #232]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a39      	ldr	r2, [pc, #228]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80024e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024e8:	f7fe fba4 	bl	8000c34 <HAL_GetTick>
 80024ec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024ee:	e009      	b.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024f0:	f7fe fba0 	bl	8000c34 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d902      	bls.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	74fb      	strb	r3, [r7, #19]
        break;
 8002502:	e005      	b.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002504:	4b30      	ldr	r3, [pc, #192]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0ef      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8002510:	7cfb      	ldrb	r3, [r7, #19]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d15a      	bne.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002516:	4b2b      	ldr	r3, [pc, #172]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800251c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002520:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d01e      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	429a      	cmp	r2, r3
 8002530:	d019      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002532:	4b24      	ldr	r3, [pc, #144]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002534:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002538:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800253c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800253e:	4b21      	ldr	r3, [pc, #132]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002544:	4a1f      	ldr	r2, [pc, #124]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002546:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800254a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800254e:	4b1d      	ldr	r3, [pc, #116]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002554:	4a1b      	ldr	r2, [pc, #108]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002556:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800255a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800255e:	4a19      	ldr	r2, [pc, #100]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b00      	cmp	r3, #0
 800256e:	d016      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002570:	f7fe fb60 	bl	8000c34 <HAL_GetTick>
 8002574:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002576:	e00b      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002578:	f7fe fb5c 	bl	8000c34 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002586:	4293      	cmp	r3, r2
 8002588:	d902      	bls.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	74fb      	strb	r3, [r7, #19]
            break;
 800258e:	e006      	b.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002590:	4b0c      	ldr	r3, [pc, #48]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0ec      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800259e:	7cfb      	ldrb	r3, [r7, #19]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10b      	bne.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025a4:	4b07      	ldr	r3, [pc, #28]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80025a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025aa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b2:	4904      	ldr	r1, [pc, #16]	@ (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80025ba:	e009      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025bc:	7cfb      	ldrb	r3, [r7, #19]
 80025be:	74bb      	strb	r3, [r7, #18]
 80025c0:	e006      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80025c2:	bf00      	nop
 80025c4:	40021000 	.word	0x40021000
 80025c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025cc:	7cfb      	ldrb	r3, [r7, #19]
 80025ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025d0:	7c7b      	ldrb	r3, [r7, #17]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d105      	bne.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d6:	4b6e      	ldr	r3, [pc, #440]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025da:	4a6d      	ldr	r2, [pc, #436]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025e0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00a      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025ee:	4b68      	ldr	r3, [pc, #416]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025f4:	f023 0203 	bic.w	r2, r3, #3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	4964      	ldr	r1, [pc, #400]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00a      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002610:	4b5f      	ldr	r3, [pc, #380]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002616:	f023 020c 	bic.w	r2, r3, #12
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	495c      	ldr	r1, [pc, #368]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002620:	4313      	orrs	r3, r2
 8002622:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0304 	and.w	r3, r3, #4
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00a      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002632:	4b57      	ldr	r3, [pc, #348]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002634:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002638:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	4953      	ldr	r1, [pc, #332]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002642:	4313      	orrs	r3, r2
 8002644:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0320 	and.w	r3, r3, #32
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00a      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002654:	4b4e      	ldr	r3, [pc, #312]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800265a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	494b      	ldr	r1, [pc, #300]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002664:	4313      	orrs	r3, r2
 8002666:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00a      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002676:	4b46      	ldr	r3, [pc, #280]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002678:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800267c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	4942      	ldr	r1, [pc, #264]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002686:	4313      	orrs	r3, r2
 8002688:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00a      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002698:	4b3d      	ldr	r3, [pc, #244]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800269a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800269e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a6:	493a      	ldr	r1, [pc, #232]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00a      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026ba:	4b35      	ldr	r3, [pc, #212]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80026bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026c0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	4931      	ldr	r1, [pc, #196]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00a      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026dc:	4b2c      	ldr	r3, [pc, #176]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80026de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026e2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	4929      	ldr	r1, [pc, #164]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00a      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026fe:	4b24      	ldr	r3, [pc, #144]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002704:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	4920      	ldr	r1, [pc, #128]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800270e:	4313      	orrs	r3, r2
 8002710:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d015      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002720:	4b1b      	ldr	r3, [pc, #108]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002726:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800272e:	4918      	ldr	r1, [pc, #96]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002730:	4313      	orrs	r3, r2
 8002732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800273a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800273e:	d105      	bne.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002740:	4b13      	ldr	r3, [pc, #76]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	4a12      	ldr	r2, [pc, #72]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002746:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800274a:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d015      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002758:	4b0d      	ldr	r3, [pc, #52]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800275a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800275e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002766:	490a      	ldr	r1, [pc, #40]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002768:	4313      	orrs	r3, r2
 800276a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002772:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002776:	d105      	bne.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002778:	4b05      	ldr	r3, [pc, #20]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	4a04      	ldr	r2, [pc, #16]	@ (8002790 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800277e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002782:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002784:	7cbb      	ldrb	r3, [r7, #18]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40021000 	.word	0x40021000

08002794 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e040      	b.n	8002828 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d106      	bne.n	80027bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7fe f86e 	bl	8000898 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2224      	movs	r2, #36	@ 0x24
 80027c0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 0201 	bic.w	r2, r2, #1
 80027d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d002      	beq.n	80027e0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 fe88 	bl	80034f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 fc2b 	bl	800303c <UART_SetConfig>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d101      	bne.n	80027f0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e01b      	b.n	8002828 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80027fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689a      	ldr	r2, [r3, #8]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800280e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f042 0201 	orr.w	r2, r2, #1
 800281e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 ff07 	bl	8003634 <UART_CheckIdleState>
 8002826:	4603      	mov	r3, r0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b08a      	sub	sp, #40	@ 0x28
 8002834:	af02      	add	r7, sp, #8
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	603b      	str	r3, [r7, #0]
 800283c:	4613      	mov	r3, r2
 800283e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002844:	2b20      	cmp	r3, #32
 8002846:	d177      	bne.n	8002938 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d002      	beq.n	8002854 <HAL_UART_Transmit+0x24>
 800284e:	88fb      	ldrh	r3, [r7, #6]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e070      	b.n	800293a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2221      	movs	r2, #33	@ 0x21
 8002864:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002866:	f7fe f9e5 	bl	8000c34 <HAL_GetTick>
 800286a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	88fa      	ldrh	r2, [r7, #6]
 8002870:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	88fa      	ldrh	r2, [r7, #6]
 8002878:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002884:	d108      	bne.n	8002898 <HAL_UART_Transmit+0x68>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d104      	bne.n	8002898 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800288e:	2300      	movs	r3, #0
 8002890:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	61bb      	str	r3, [r7, #24]
 8002896:	e003      	b.n	80028a0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800289c:	2300      	movs	r3, #0
 800289e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80028a0:	e02f      	b.n	8002902 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	2200      	movs	r2, #0
 80028aa:	2180      	movs	r1, #128	@ 0x80
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f000 ff69 	bl	8003784 <UART_WaitOnFlagUntilTimeout>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d004      	beq.n	80028c2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2220      	movs	r2, #32
 80028bc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e03b      	b.n	800293a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10b      	bne.n	80028e0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	881a      	ldrh	r2, [r3, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028d4:	b292      	uxth	r2, r2
 80028d6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	3302      	adds	r3, #2
 80028dc:	61bb      	str	r3, [r7, #24]
 80028de:	e007      	b.n	80028f0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	781a      	ldrb	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	3301      	adds	r3, #1
 80028ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	3b01      	subs	r3, #1
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002908:	b29b      	uxth	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1c9      	bne.n	80028a2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	2200      	movs	r2, #0
 8002916:	2140      	movs	r1, #64	@ 0x40
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f000 ff33 	bl	8003784 <UART_WaitOnFlagUntilTimeout>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d004      	beq.n	800292e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2220      	movs	r2, #32
 8002928:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e005      	b.n	800293a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2220      	movs	r2, #32
 8002932:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002934:	2300      	movs	r3, #0
 8002936:	e000      	b.n	800293a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002938:	2302      	movs	r3, #2
  }
}
 800293a:	4618      	mov	r0, r3
 800293c:	3720      	adds	r7, #32
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
	...

08002944 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08a      	sub	sp, #40	@ 0x28
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	4613      	mov	r3, r2
 8002950:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002958:	2b20      	cmp	r3, #32
 800295a:	d137      	bne.n	80029cc <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d002      	beq.n	8002968 <HAL_UART_Receive_DMA+0x24>
 8002962:	88fb      	ldrh	r3, [r7, #6]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e030      	b.n	80029ce <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a18      	ldr	r2, [pc, #96]	@ (80029d8 <HAL_UART_Receive_DMA+0x94>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d01f      	beq.n	80029bc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d018      	beq.n	80029bc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	e853 3f00 	ldrex	r3, [r3]
 8002996:	613b      	str	r3, [r7, #16]
   return(result);
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800299e:	627b      	str	r3, [r7, #36]	@ 0x24
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	461a      	mov	r2, r3
 80029a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a8:	623b      	str	r3, [r7, #32]
 80029aa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ac:	69f9      	ldr	r1, [r7, #28]
 80029ae:	6a3a      	ldr	r2, [r7, #32]
 80029b0:	e841 2300 	strex	r3, r2, [r1]
 80029b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1e6      	bne.n	800298a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80029bc:	88fb      	ldrh	r3, [r7, #6]
 80029be:	461a      	mov	r2, r3
 80029c0:	68b9      	ldr	r1, [r7, #8]
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 ff4c 	bl	8003860 <UART_Start_Receive_DMA>
 80029c8:	4603      	mov	r3, r0
 80029ca:	e000      	b.n	80029ce <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029cc:	2302      	movs	r3, #2
  }
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3728      	adds	r7, #40	@ 0x28
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40008000 	.word	0x40008000

080029dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b0ba      	sub	sp, #232	@ 0xe8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002a02:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002a06:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002a10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d115      	bne.n	8002a44 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a1c:	f003 0320 	and.w	r3, r3, #32
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00f      	beq.n	8002a44 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a28:	f003 0320 	and.w	r3, r3, #32
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d009      	beq.n	8002a44 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 82ca 	beq.w	8002fce <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	4798      	blx	r3
      }
      return;
 8002a42:	e2c4      	b.n	8002fce <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002a44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f000 8117 	beq.w	8002c7c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002a4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d106      	bne.n	8002a68 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002a5a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002a5e:	4b85      	ldr	r3, [pc, #532]	@ (8002c74 <HAL_UART_IRQHandler+0x298>)
 8002a60:	4013      	ands	r3, r2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f000 810a 	beq.w	8002c7c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d011      	beq.n	8002a98 <HAL_UART_IRQHandler+0xbc>
 8002a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00b      	beq.n	8002a98 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2201      	movs	r2, #1
 8002a86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a8e:	f043 0201 	orr.w	r2, r3, #1
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d011      	beq.n	8002ac8 <HAL_UART_IRQHandler+0xec>
 8002aa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00b      	beq.n	8002ac8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002abe:	f043 0204 	orr.w	r2, r3, #4
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d011      	beq.n	8002af8 <HAL_UART_IRQHandler+0x11c>
 8002ad4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00b      	beq.n	8002af8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2204      	movs	r2, #4
 8002ae6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002aee:	f043 0202 	orr.w	r2, r3, #2
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002afc:	f003 0308 	and.w	r3, r3, #8
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d017      	beq.n	8002b34 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b08:	f003 0320 	and.w	r3, r3, #32
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d105      	bne.n	8002b1c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002b10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b14:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00b      	beq.n	8002b34 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2208      	movs	r2, #8
 8002b22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b2a:	f043 0208 	orr.w	r2, r3, #8
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d012      	beq.n	8002b66 <HAL_UART_IRQHandler+0x18a>
 8002b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b44:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00c      	beq.n	8002b66 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002b54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b5c:	f043 0220 	orr.w	r2, r3, #32
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 8230 	beq.w	8002fd2 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b76:	f003 0320 	and.w	r3, r3, #32
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00d      	beq.n	8002b9a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b82:	f003 0320 	and.w	r3, r3, #32
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d007      	beq.n	8002b9a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ba0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bae:	2b40      	cmp	r3, #64	@ 0x40
 8002bb0:	d005      	beq.n	8002bbe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002bb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002bb6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d04f      	beq.n	8002c5e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 ff14 	bl	80039ec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bce:	2b40      	cmp	r3, #64	@ 0x40
 8002bd0:	d141      	bne.n	8002c56 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	3308      	adds	r3, #8
 8002bd8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002be0:	e853 3f00 	ldrex	r3, [r3]
 8002be4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002be8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002bec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002bf0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	3308      	adds	r3, #8
 8002bfa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002bfe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002c02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002c0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002c0e:	e841 2300 	strex	r3, r2, [r1]
 8002c12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002c16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1d9      	bne.n	8002bd2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d013      	beq.n	8002c4e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c2a:	4a13      	ldr	r2, [pc, #76]	@ (8002c78 <HAL_UART_IRQHandler+0x29c>)
 8002c2c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fe fa96 	bl	8001164 <HAL_DMA_Abort_IT>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d017      	beq.n	8002c6e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002c48:	4610      	mov	r0, r2
 8002c4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c4c:	e00f      	b.n	8002c6e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f9de 	bl	8003010 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c54:	e00b      	b.n	8002c6e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f9da 	bl	8003010 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c5c:	e007      	b.n	8002c6e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f9d6 	bl	8003010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002c6c:	e1b1      	b.n	8002fd2 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c6e:	bf00      	nop
    return;
 8002c70:	e1af      	b.n	8002fd2 <HAL_UART_IRQHandler+0x5f6>
 8002c72:	bf00      	nop
 8002c74:	04000120 	.word	0x04000120
 8002c78:	08003c9d 	.word	0x08003c9d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	f040 816a 	bne.w	8002f5a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c8a:	f003 0310 	and.w	r3, r3, #16
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 8163 	beq.w	8002f5a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c98:	f003 0310 	and.w	r3, r3, #16
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f000 815c 	beq.w	8002f5a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2210      	movs	r2, #16
 8002ca8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cb4:	2b40      	cmp	r3, #64	@ 0x40
 8002cb6:	f040 80d4 	bne.w	8002e62 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002cc6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f000 80ad 	beq.w	8002e2a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002cd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	f080 80a5 	bcs.w	8002e2a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002ce6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0320 	and.w	r3, r3, #32
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f040 8086 	bne.w	8002e08 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d04:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d08:	e853 3f00 	ldrex	r3, [r3]
 8002d0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002d10:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	461a      	mov	r2, r3
 8002d22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002d26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002d2a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002d32:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002d36:	e841 2300 	strex	r3, r2, [r1]
 8002d3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002d3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1da      	bne.n	8002cfc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	3308      	adds	r3, #8
 8002d4c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d50:	e853 3f00 	ldrex	r3, [r3]
 8002d54:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002d56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d58:	f023 0301 	bic.w	r3, r3, #1
 8002d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	3308      	adds	r3, #8
 8002d66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002d6a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002d6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d70:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002d72:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002d76:	e841 2300 	strex	r3, r2, [r1]
 8002d7a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002d7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1e1      	bne.n	8002d46 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	3308      	adds	r3, #8
 8002d88:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d8c:	e853 3f00 	ldrex	r3, [r3]
 8002d90:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002d92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	3308      	adds	r3, #8
 8002da2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002da6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002da8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002daa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002dac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002dae:	e841 2300 	strex	r3, r2, [r1]
 8002db2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002db4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1e3      	bne.n	8002d82 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002dd0:	e853 3f00 	ldrex	r3, [r3]
 8002dd4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002dd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002dd8:	f023 0310 	bic.w	r3, r3, #16
 8002ddc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	461a      	mov	r2, r3
 8002de6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002dea:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002dec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002df0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002df2:	e841 2300 	strex	r3, r2, [r1]
 8002df6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002df8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1e4      	bne.n	8002dc8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7fe f970 	bl	80010e8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	4619      	mov	r1, r3
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f8fe 	bl	8003024 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002e28:	e0d5      	b.n	8002fd6 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002e30:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002e34:	429a      	cmp	r2, r3
 8002e36:	f040 80ce 	bne.w	8002fd6 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0320 	and.w	r3, r3, #32
 8002e46:	2b20      	cmp	r3, #32
 8002e48:	f040 80c5 	bne.w	8002fd6 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002e58:	4619      	mov	r1, r3
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 f8e2 	bl	8003024 <HAL_UARTEx_RxEventCallback>
      return;
 8002e60:	e0b9      	b.n	8002fd6 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 80ab 	beq.w	8002fda <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8002e84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 80a6 	beq.w	8002fda <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e96:	e853 3f00 	ldrex	r3, [r3]
 8002e9a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ea2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002eb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002eb2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002eb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002eb8:	e841 2300 	strex	r3, r2, [r1]
 8002ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002ebe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1e4      	bne.n	8002e8e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	3308      	adds	r3, #8
 8002eca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ece:	e853 3f00 	ldrex	r3, [r3]
 8002ed2:	623b      	str	r3, [r7, #32]
   return(result);
 8002ed4:	6a3b      	ldr	r3, [r7, #32]
 8002ed6:	f023 0301 	bic.w	r3, r3, #1
 8002eda:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	3308      	adds	r3, #8
 8002ee4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002ee8:	633a      	str	r2, [r7, #48]	@ 0x30
 8002eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002eee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ef0:	e841 2300 	strex	r3, r2, [r1]
 8002ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1e3      	bne.n	8002ec4 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	e853 3f00 	ldrex	r3, [r3]
 8002f1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f023 0310 	bic.w	r3, r3, #16
 8002f24:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f32:	61fb      	str	r3, [r7, #28]
 8002f34:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f36:	69b9      	ldr	r1, [r7, #24]
 8002f38:	69fa      	ldr	r2, [r7, #28]
 8002f3a:	e841 2300 	strex	r3, r2, [r1]
 8002f3e:	617b      	str	r3, [r7, #20]
   return(result);
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1e4      	bne.n	8002f10 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2202      	movs	r2, #2
 8002f4a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002f50:	4619      	mov	r1, r3
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f866 	bl	8003024 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f58:	e03f      	b.n	8002fda <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00e      	beq.n	8002f84 <HAL_UART_IRQHandler+0x5a8>
 8002f66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d008      	beq.n	8002f84 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002f7a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 fecd 	bl	8003d1c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f82:	e02d      	b.n	8002fe0 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00e      	beq.n	8002fae <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d008      	beq.n	8002fae <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d01c      	beq.n	8002fde <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	4798      	blx	r3
    }
    return;
 8002fac:	e017      	b.n	8002fde <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d012      	beq.n	8002fe0 <HAL_UART_IRQHandler+0x604>
 8002fba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00c      	beq.n	8002fe0 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 fe7e 	bl	8003cc8 <UART_EndTransmit_IT>
    return;
 8002fcc:	e008      	b.n	8002fe0 <HAL_UART_IRQHandler+0x604>
      return;
 8002fce:	bf00      	nop
 8002fd0:	e006      	b.n	8002fe0 <HAL_UART_IRQHandler+0x604>
    return;
 8002fd2:	bf00      	nop
 8002fd4:	e004      	b.n	8002fe0 <HAL_UART_IRQHandler+0x604>
      return;
 8002fd6:	bf00      	nop
 8002fd8:	e002      	b.n	8002fe0 <HAL_UART_IRQHandler+0x604>
      return;
 8002fda:	bf00      	nop
 8002fdc:	e000      	b.n	8002fe0 <HAL_UART_IRQHandler+0x604>
    return;
 8002fde:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002fe0:	37e8      	adds	r7, #232	@ 0xe8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop

08002fe8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	460b      	mov	r3, r1
 800302e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800303c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003040:	b08a      	sub	sp, #40	@ 0x28
 8003042:	af00      	add	r7, sp, #0
 8003044:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003046:	2300      	movs	r3, #0
 8003048:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	431a      	orrs	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	431a      	orrs	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	69db      	ldr	r3, [r3, #28]
 8003060:	4313      	orrs	r3, r2
 8003062:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	4b9e      	ldr	r3, [pc, #632]	@ (80032e4 <UART_SetConfig+0x2a8>)
 800306c:	4013      	ands	r3, r2
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	6812      	ldr	r2, [r2, #0]
 8003072:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003074:	430b      	orrs	r3, r1
 8003076:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	68da      	ldr	r2, [r3, #12]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	430a      	orrs	r2, r1
 800308c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a93      	ldr	r2, [pc, #588]	@ (80032e8 <UART_SetConfig+0x2ac>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d004      	beq.n	80030a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030a4:	4313      	orrs	r3, r2
 80030a6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030b8:	430a      	orrs	r2, r1
 80030ba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a8a      	ldr	r2, [pc, #552]	@ (80032ec <UART_SetConfig+0x2b0>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d126      	bne.n	8003114 <UART_SetConfig+0xd8>
 80030c6:	4b8a      	ldr	r3, [pc, #552]	@ (80032f0 <UART_SetConfig+0x2b4>)
 80030c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030cc:	f003 0303 	and.w	r3, r3, #3
 80030d0:	2b03      	cmp	r3, #3
 80030d2:	d81b      	bhi.n	800310c <UART_SetConfig+0xd0>
 80030d4:	a201      	add	r2, pc, #4	@ (adr r2, 80030dc <UART_SetConfig+0xa0>)
 80030d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030da:	bf00      	nop
 80030dc:	080030ed 	.word	0x080030ed
 80030e0:	080030fd 	.word	0x080030fd
 80030e4:	080030f5 	.word	0x080030f5
 80030e8:	08003105 	.word	0x08003105
 80030ec:	2301      	movs	r3, #1
 80030ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030f2:	e0ab      	b.n	800324c <UART_SetConfig+0x210>
 80030f4:	2302      	movs	r3, #2
 80030f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030fa:	e0a7      	b.n	800324c <UART_SetConfig+0x210>
 80030fc:	2304      	movs	r3, #4
 80030fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003102:	e0a3      	b.n	800324c <UART_SetConfig+0x210>
 8003104:	2308      	movs	r3, #8
 8003106:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800310a:	e09f      	b.n	800324c <UART_SetConfig+0x210>
 800310c:	2310      	movs	r3, #16
 800310e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003112:	e09b      	b.n	800324c <UART_SetConfig+0x210>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a76      	ldr	r2, [pc, #472]	@ (80032f4 <UART_SetConfig+0x2b8>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d138      	bne.n	8003190 <UART_SetConfig+0x154>
 800311e:	4b74      	ldr	r3, [pc, #464]	@ (80032f0 <UART_SetConfig+0x2b4>)
 8003120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003124:	f003 030c 	and.w	r3, r3, #12
 8003128:	2b0c      	cmp	r3, #12
 800312a:	d82d      	bhi.n	8003188 <UART_SetConfig+0x14c>
 800312c:	a201      	add	r2, pc, #4	@ (adr r2, 8003134 <UART_SetConfig+0xf8>)
 800312e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003132:	bf00      	nop
 8003134:	08003169 	.word	0x08003169
 8003138:	08003189 	.word	0x08003189
 800313c:	08003189 	.word	0x08003189
 8003140:	08003189 	.word	0x08003189
 8003144:	08003179 	.word	0x08003179
 8003148:	08003189 	.word	0x08003189
 800314c:	08003189 	.word	0x08003189
 8003150:	08003189 	.word	0x08003189
 8003154:	08003171 	.word	0x08003171
 8003158:	08003189 	.word	0x08003189
 800315c:	08003189 	.word	0x08003189
 8003160:	08003189 	.word	0x08003189
 8003164:	08003181 	.word	0x08003181
 8003168:	2300      	movs	r3, #0
 800316a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800316e:	e06d      	b.n	800324c <UART_SetConfig+0x210>
 8003170:	2302      	movs	r3, #2
 8003172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003176:	e069      	b.n	800324c <UART_SetConfig+0x210>
 8003178:	2304      	movs	r3, #4
 800317a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800317e:	e065      	b.n	800324c <UART_SetConfig+0x210>
 8003180:	2308      	movs	r3, #8
 8003182:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003186:	e061      	b.n	800324c <UART_SetConfig+0x210>
 8003188:	2310      	movs	r3, #16
 800318a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800318e:	e05d      	b.n	800324c <UART_SetConfig+0x210>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a58      	ldr	r2, [pc, #352]	@ (80032f8 <UART_SetConfig+0x2bc>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d125      	bne.n	80031e6 <UART_SetConfig+0x1aa>
 800319a:	4b55      	ldr	r3, [pc, #340]	@ (80032f0 <UART_SetConfig+0x2b4>)
 800319c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031a0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80031a4:	2b30      	cmp	r3, #48	@ 0x30
 80031a6:	d016      	beq.n	80031d6 <UART_SetConfig+0x19a>
 80031a8:	2b30      	cmp	r3, #48	@ 0x30
 80031aa:	d818      	bhi.n	80031de <UART_SetConfig+0x1a2>
 80031ac:	2b20      	cmp	r3, #32
 80031ae:	d00a      	beq.n	80031c6 <UART_SetConfig+0x18a>
 80031b0:	2b20      	cmp	r3, #32
 80031b2:	d814      	bhi.n	80031de <UART_SetConfig+0x1a2>
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d002      	beq.n	80031be <UART_SetConfig+0x182>
 80031b8:	2b10      	cmp	r3, #16
 80031ba:	d008      	beq.n	80031ce <UART_SetConfig+0x192>
 80031bc:	e00f      	b.n	80031de <UART_SetConfig+0x1a2>
 80031be:	2300      	movs	r3, #0
 80031c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031c4:	e042      	b.n	800324c <UART_SetConfig+0x210>
 80031c6:	2302      	movs	r3, #2
 80031c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031cc:	e03e      	b.n	800324c <UART_SetConfig+0x210>
 80031ce:	2304      	movs	r3, #4
 80031d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031d4:	e03a      	b.n	800324c <UART_SetConfig+0x210>
 80031d6:	2308      	movs	r3, #8
 80031d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031dc:	e036      	b.n	800324c <UART_SetConfig+0x210>
 80031de:	2310      	movs	r3, #16
 80031e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031e4:	e032      	b.n	800324c <UART_SetConfig+0x210>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a3f      	ldr	r2, [pc, #252]	@ (80032e8 <UART_SetConfig+0x2ac>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d12a      	bne.n	8003246 <UART_SetConfig+0x20a>
 80031f0:	4b3f      	ldr	r3, [pc, #252]	@ (80032f0 <UART_SetConfig+0x2b4>)
 80031f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031f6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80031fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80031fe:	d01a      	beq.n	8003236 <UART_SetConfig+0x1fa>
 8003200:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003204:	d81b      	bhi.n	800323e <UART_SetConfig+0x202>
 8003206:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800320a:	d00c      	beq.n	8003226 <UART_SetConfig+0x1ea>
 800320c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003210:	d815      	bhi.n	800323e <UART_SetConfig+0x202>
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <UART_SetConfig+0x1e2>
 8003216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800321a:	d008      	beq.n	800322e <UART_SetConfig+0x1f2>
 800321c:	e00f      	b.n	800323e <UART_SetConfig+0x202>
 800321e:	2300      	movs	r3, #0
 8003220:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003224:	e012      	b.n	800324c <UART_SetConfig+0x210>
 8003226:	2302      	movs	r3, #2
 8003228:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800322c:	e00e      	b.n	800324c <UART_SetConfig+0x210>
 800322e:	2304      	movs	r3, #4
 8003230:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003234:	e00a      	b.n	800324c <UART_SetConfig+0x210>
 8003236:	2308      	movs	r3, #8
 8003238:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800323c:	e006      	b.n	800324c <UART_SetConfig+0x210>
 800323e:	2310      	movs	r3, #16
 8003240:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003244:	e002      	b.n	800324c <UART_SetConfig+0x210>
 8003246:	2310      	movs	r3, #16
 8003248:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a25      	ldr	r2, [pc, #148]	@ (80032e8 <UART_SetConfig+0x2ac>)
 8003252:	4293      	cmp	r3, r2
 8003254:	f040 808a 	bne.w	800336c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003258:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800325c:	2b08      	cmp	r3, #8
 800325e:	d824      	bhi.n	80032aa <UART_SetConfig+0x26e>
 8003260:	a201      	add	r2, pc, #4	@ (adr r2, 8003268 <UART_SetConfig+0x22c>)
 8003262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003266:	bf00      	nop
 8003268:	0800328d 	.word	0x0800328d
 800326c:	080032ab 	.word	0x080032ab
 8003270:	08003295 	.word	0x08003295
 8003274:	080032ab 	.word	0x080032ab
 8003278:	0800329b 	.word	0x0800329b
 800327c:	080032ab 	.word	0x080032ab
 8003280:	080032ab 	.word	0x080032ab
 8003284:	080032ab 	.word	0x080032ab
 8003288:	080032a3 	.word	0x080032a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800328c:	f7ff f870 	bl	8002370 <HAL_RCC_GetPCLK1Freq>
 8003290:	61f8      	str	r0, [r7, #28]
        break;
 8003292:	e010      	b.n	80032b6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003294:	4b19      	ldr	r3, [pc, #100]	@ (80032fc <UART_SetConfig+0x2c0>)
 8003296:	61fb      	str	r3, [r7, #28]
        break;
 8003298:	e00d      	b.n	80032b6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800329a:	f7fe ffd3 	bl	8002244 <HAL_RCC_GetSysClockFreq>
 800329e:	61f8      	str	r0, [r7, #28]
        break;
 80032a0:	e009      	b.n	80032b6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032a6:	61fb      	str	r3, [r7, #28]
        break;
 80032a8:	e005      	b.n	80032b6 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80032aa:	2300      	movs	r3, #0
 80032ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80032b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 8109 	beq.w	80034d0 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	4613      	mov	r3, r2
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	4413      	add	r3, r2
 80032c8:	69fa      	ldr	r2, [r7, #28]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d305      	bcc.n	80032da <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80032d4:	69fa      	ldr	r2, [r7, #28]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d912      	bls.n	8003300 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80032e0:	e0f6      	b.n	80034d0 <UART_SetConfig+0x494>
 80032e2:	bf00      	nop
 80032e4:	efff69f3 	.word	0xefff69f3
 80032e8:	40008000 	.word	0x40008000
 80032ec:	40013800 	.word	0x40013800
 80032f0:	40021000 	.word	0x40021000
 80032f4:	40004400 	.word	0x40004400
 80032f8:	40004800 	.word	0x40004800
 80032fc:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	2200      	movs	r2, #0
 8003304:	461c      	mov	r4, r3
 8003306:	4615      	mov	r5, r2
 8003308:	f04f 0200 	mov.w	r2, #0
 800330c:	f04f 0300 	mov.w	r3, #0
 8003310:	022b      	lsls	r3, r5, #8
 8003312:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003316:	0222      	lsls	r2, r4, #8
 8003318:	68f9      	ldr	r1, [r7, #12]
 800331a:	6849      	ldr	r1, [r1, #4]
 800331c:	0849      	lsrs	r1, r1, #1
 800331e:	2000      	movs	r0, #0
 8003320:	4688      	mov	r8, r1
 8003322:	4681      	mov	r9, r0
 8003324:	eb12 0a08 	adds.w	sl, r2, r8
 8003328:	eb43 0b09 	adc.w	fp, r3, r9
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	603b      	str	r3, [r7, #0]
 8003334:	607a      	str	r2, [r7, #4]
 8003336:	e9d7 2300 	ldrd	r2, r3, [r7]
 800333a:	4650      	mov	r0, sl
 800333c:	4659      	mov	r1, fp
 800333e:	f7fc ff45 	bl	80001cc <__aeabi_uldivmod>
 8003342:	4602      	mov	r2, r0
 8003344:	460b      	mov	r3, r1
 8003346:	4613      	mov	r3, r2
 8003348:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003350:	d308      	bcc.n	8003364 <UART_SetConfig+0x328>
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003358:	d204      	bcs.n	8003364 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	60da      	str	r2, [r3, #12]
 8003362:	e0b5      	b.n	80034d0 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800336a:	e0b1      	b.n	80034d0 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003374:	d15d      	bne.n	8003432 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8003376:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800337a:	2b08      	cmp	r3, #8
 800337c:	d827      	bhi.n	80033ce <UART_SetConfig+0x392>
 800337e:	a201      	add	r2, pc, #4	@ (adr r2, 8003384 <UART_SetConfig+0x348>)
 8003380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003384:	080033a9 	.word	0x080033a9
 8003388:	080033b1 	.word	0x080033b1
 800338c:	080033b9 	.word	0x080033b9
 8003390:	080033cf 	.word	0x080033cf
 8003394:	080033bf 	.word	0x080033bf
 8003398:	080033cf 	.word	0x080033cf
 800339c:	080033cf 	.word	0x080033cf
 80033a0:	080033cf 	.word	0x080033cf
 80033a4:	080033c7 	.word	0x080033c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033a8:	f7fe ffe2 	bl	8002370 <HAL_RCC_GetPCLK1Freq>
 80033ac:	61f8      	str	r0, [r7, #28]
        break;
 80033ae:	e014      	b.n	80033da <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033b0:	f7fe fff4 	bl	800239c <HAL_RCC_GetPCLK2Freq>
 80033b4:	61f8      	str	r0, [r7, #28]
        break;
 80033b6:	e010      	b.n	80033da <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033b8:	4b4c      	ldr	r3, [pc, #304]	@ (80034ec <UART_SetConfig+0x4b0>)
 80033ba:	61fb      	str	r3, [r7, #28]
        break;
 80033bc:	e00d      	b.n	80033da <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033be:	f7fe ff41 	bl	8002244 <HAL_RCC_GetSysClockFreq>
 80033c2:	61f8      	str	r0, [r7, #28]
        break;
 80033c4:	e009      	b.n	80033da <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033ca:	61fb      	str	r3, [r7, #28]
        break;
 80033cc:	e005      	b.n	80033da <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80033ce:	2300      	movs	r3, #0
 80033d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80033d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d077      	beq.n	80034d0 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	005a      	lsls	r2, r3, #1
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	085b      	lsrs	r3, r3, #1
 80033ea:	441a      	add	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	2b0f      	cmp	r3, #15
 80033fa:	d916      	bls.n	800342a <UART_SetConfig+0x3ee>
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003402:	d212      	bcs.n	800342a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	b29b      	uxth	r3, r3
 8003408:	f023 030f 	bic.w	r3, r3, #15
 800340c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	085b      	lsrs	r3, r3, #1
 8003412:	b29b      	uxth	r3, r3
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	b29a      	uxth	r2, r3
 800341a:	8afb      	ldrh	r3, [r7, #22]
 800341c:	4313      	orrs	r3, r2
 800341e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	8afa      	ldrh	r2, [r7, #22]
 8003426:	60da      	str	r2, [r3, #12]
 8003428:	e052      	b.n	80034d0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003430:	e04e      	b.n	80034d0 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003432:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003436:	2b08      	cmp	r3, #8
 8003438:	d827      	bhi.n	800348a <UART_SetConfig+0x44e>
 800343a:	a201      	add	r2, pc, #4	@ (adr r2, 8003440 <UART_SetConfig+0x404>)
 800343c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003440:	08003465 	.word	0x08003465
 8003444:	0800346d 	.word	0x0800346d
 8003448:	08003475 	.word	0x08003475
 800344c:	0800348b 	.word	0x0800348b
 8003450:	0800347b 	.word	0x0800347b
 8003454:	0800348b 	.word	0x0800348b
 8003458:	0800348b 	.word	0x0800348b
 800345c:	0800348b 	.word	0x0800348b
 8003460:	08003483 	.word	0x08003483
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003464:	f7fe ff84 	bl	8002370 <HAL_RCC_GetPCLK1Freq>
 8003468:	61f8      	str	r0, [r7, #28]
        break;
 800346a:	e014      	b.n	8003496 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800346c:	f7fe ff96 	bl	800239c <HAL_RCC_GetPCLK2Freq>
 8003470:	61f8      	str	r0, [r7, #28]
        break;
 8003472:	e010      	b.n	8003496 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003474:	4b1d      	ldr	r3, [pc, #116]	@ (80034ec <UART_SetConfig+0x4b0>)
 8003476:	61fb      	str	r3, [r7, #28]
        break;
 8003478:	e00d      	b.n	8003496 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800347a:	f7fe fee3 	bl	8002244 <HAL_RCC_GetSysClockFreq>
 800347e:	61f8      	str	r0, [r7, #28]
        break;
 8003480:	e009      	b.n	8003496 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003482:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003486:	61fb      	str	r3, [r7, #28]
        break;
 8003488:	e005      	b.n	8003496 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800348a:	2300      	movs	r3, #0
 800348c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003494:	bf00      	nop
    }

    if (pclk != 0U)
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d019      	beq.n	80034d0 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	085a      	lsrs	r2, r3, #1
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	441a      	add	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	2b0f      	cmp	r3, #15
 80034b4:	d909      	bls.n	80034ca <UART_SetConfig+0x48e>
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034bc:	d205      	bcs.n	80034ca <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	60da      	str	r2, [r3, #12]
 80034c8:	e002      	b.n	80034d0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80034dc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3728      	adds	r7, #40	@ 0x28
 80034e4:	46bd      	mov	sp, r7
 80034e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034ea:	bf00      	nop
 80034ec:	00f42400 	.word	0x00f42400

080034f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fc:	f003 0308 	and.w	r3, r3, #8
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00a      	beq.n	800351a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00a      	beq.n	800353c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00a      	beq.n	800355e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003562:	f003 0304 	and.w	r3, r3, #4
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00a      	beq.n	8003580 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003584:	f003 0310 	and.w	r3, r3, #16
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00a      	beq.n	80035a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	430a      	orrs	r2, r1
 80035a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a6:	f003 0320 	and.w	r3, r3, #32
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00a      	beq.n	80035c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d01a      	beq.n	8003606 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035ee:	d10a      	bne.n	8003606 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00a      	beq.n	8003628 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	605a      	str	r2, [r3, #4]
  }
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b098      	sub	sp, #96	@ 0x60
 8003638:	af02      	add	r7, sp, #8
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003644:	f7fd faf6 	bl	8000c34 <HAL_GetTick>
 8003648:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0308 	and.w	r3, r3, #8
 8003654:	2b08      	cmp	r3, #8
 8003656:	d12e      	bne.n	80036b6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003658:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003660:	2200      	movs	r2, #0
 8003662:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f88c 	bl	8003784 <UART_WaitOnFlagUntilTimeout>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d021      	beq.n	80036b6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800367a:	e853 3f00 	ldrex	r3, [r3]
 800367e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003682:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003686:	653b      	str	r3, [r7, #80]	@ 0x50
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	461a      	mov	r2, r3
 800368e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003690:	647b      	str	r3, [r7, #68]	@ 0x44
 8003692:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003694:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003696:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003698:	e841 2300 	strex	r3, r2, [r1]
 800369c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800369e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1e6      	bne.n	8003672 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2220      	movs	r2, #32
 80036a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e062      	b.n	800377c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d149      	bne.n	8003758 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036cc:	2200      	movs	r2, #0
 80036ce:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f856 	bl	8003784 <UART_WaitOnFlagUntilTimeout>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d03c      	beq.n	8003758 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e6:	e853 3f00 	ldrex	r3, [r3]
 80036ea:	623b      	str	r3, [r7, #32]
   return(result);
 80036ec:	6a3b      	ldr	r3, [r7, #32]
 80036ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	461a      	mov	r2, r3
 80036fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80036fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003700:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003702:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003704:	e841 2300 	strex	r3, r2, [r1]
 8003708:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800370a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1e6      	bne.n	80036de <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	3308      	adds	r3, #8
 8003716:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	e853 3f00 	ldrex	r3, [r3]
 800371e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f023 0301 	bic.w	r3, r3, #1
 8003726:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	3308      	adds	r3, #8
 800372e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003730:	61fa      	str	r2, [r7, #28]
 8003732:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003734:	69b9      	ldr	r1, [r7, #24]
 8003736:	69fa      	ldr	r2, [r7, #28]
 8003738:	e841 2300 	strex	r3, r2, [r1]
 800373c:	617b      	str	r3, [r7, #20]
   return(result);
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1e5      	bne.n	8003710 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2220      	movs	r2, #32
 8003748:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e011      	b.n	800377c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2220      	movs	r2, #32
 800375c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2220      	movs	r2, #32
 8003762:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3758      	adds	r7, #88	@ 0x58
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	603b      	str	r3, [r7, #0]
 8003790:	4613      	mov	r3, r2
 8003792:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003794:	e04f      	b.n	8003836 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379c:	d04b      	beq.n	8003836 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800379e:	f7fd fa49 	bl	8000c34 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d302      	bcc.n	80037b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e04e      	b.n	8003856 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0304 	and.w	r3, r3, #4
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d037      	beq.n	8003836 <UART_WaitOnFlagUntilTimeout+0xb2>
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	2b80      	cmp	r3, #128	@ 0x80
 80037ca:	d034      	beq.n	8003836 <UART_WaitOnFlagUntilTimeout+0xb2>
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2b40      	cmp	r3, #64	@ 0x40
 80037d0:	d031      	beq.n	8003836 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	f003 0308 	and.w	r3, r3, #8
 80037dc:	2b08      	cmp	r3, #8
 80037de:	d110      	bne.n	8003802 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2208      	movs	r2, #8
 80037e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 f8ff 	bl	80039ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2208      	movs	r2, #8
 80037f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e029      	b.n	8003856 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800380c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003810:	d111      	bne.n	8003836 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800381a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 f8e5 	bl	80039ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2220      	movs	r2, #32
 8003826:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e00f      	b.n	8003856 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	69da      	ldr	r2, [r3, #28]
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	4013      	ands	r3, r2
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	429a      	cmp	r2, r3
 8003844:	bf0c      	ite	eq
 8003846:	2301      	moveq	r3, #1
 8003848:	2300      	movne	r3, #0
 800384a:	b2db      	uxtb	r3, r3
 800384c:	461a      	mov	r2, r3
 800384e:	79fb      	ldrb	r3, [r7, #7]
 8003850:	429a      	cmp	r2, r3
 8003852:	d0a0      	beq.n	8003796 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
	...

08003860 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b096      	sub	sp, #88	@ 0x58
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	4613      	mov	r3, r2
 800386c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	88fa      	ldrh	r2, [r7, #6]
 8003878:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2222      	movs	r2, #34	@ 0x22
 8003888:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003890:	2b00      	cmp	r3, #0
 8003892:	d028      	beq.n	80038e6 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003898:	4a3e      	ldr	r2, [pc, #248]	@ (8003994 <UART_Start_Receive_DMA+0x134>)
 800389a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038a0:	4a3d      	ldr	r2, [pc, #244]	@ (8003998 <UART_Start_Receive_DMA+0x138>)
 80038a2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038a8:	4a3c      	ldr	r2, [pc, #240]	@ (800399c <UART_Start_Receive_DMA+0x13c>)
 80038aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038b0:	2200      	movs	r2, #0
 80038b2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	3324      	adds	r3, #36	@ 0x24
 80038be:	4619      	mov	r1, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038c4:	461a      	mov	r2, r3
 80038c6:	88fb      	ldrh	r3, [r7, #6]
 80038c8:	f7fd fbae 	bl	8001028 <HAL_DMA_Start_IT>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d009      	beq.n	80038e6 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2210      	movs	r2, #16
 80038d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2220      	movs	r2, #32
 80038de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e051      	b.n	800398a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d018      	beq.n	8003920 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038f6:	e853 3f00 	ldrex	r3, [r3]
 80038fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80038fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003902:	657b      	str	r3, [r7, #84]	@ 0x54
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	461a      	mov	r2, r3
 800390a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800390c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800390e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003910:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003912:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003914:	e841 2300 	strex	r3, r2, [r1]
 8003918:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800391a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1e6      	bne.n	80038ee <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	3308      	adds	r3, #8
 8003926:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800392a:	e853 3f00 	ldrex	r3, [r3]
 800392e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003932:	f043 0301 	orr.w	r3, r3, #1
 8003936:	653b      	str	r3, [r7, #80]	@ 0x50
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	3308      	adds	r3, #8
 800393e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003940:	637a      	str	r2, [r7, #52]	@ 0x34
 8003942:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003944:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003946:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003948:	e841 2300 	strex	r3, r2, [r1]
 800394c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800394e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1e5      	bne.n	8003920 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	3308      	adds	r3, #8
 800395a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	e853 3f00 	ldrex	r3, [r3]
 8003962:	613b      	str	r3, [r7, #16]
   return(result);
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800396a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	3308      	adds	r3, #8
 8003972:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003974:	623a      	str	r2, [r7, #32]
 8003976:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003978:	69f9      	ldr	r1, [r7, #28]
 800397a:	6a3a      	ldr	r2, [r7, #32]
 800397c:	e841 2300 	strex	r3, r2, [r1]
 8003980:	61bb      	str	r3, [r7, #24]
   return(result);
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1e5      	bne.n	8003954 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3758      	adds	r7, #88	@ 0x58
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	08003ab5 	.word	0x08003ab5
 8003998:	08003be1 	.word	0x08003be1
 800399c:	08003c1f 	.word	0x08003c1f

080039a0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b089      	sub	sp, #36	@ 0x24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	e853 3f00 	ldrex	r3, [r3]
 80039b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80039bc:	61fb      	str	r3, [r7, #28]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	461a      	mov	r2, r3
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	61bb      	str	r3, [r7, #24]
 80039c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ca:	6979      	ldr	r1, [r7, #20]
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	e841 2300 	strex	r3, r2, [r1]
 80039d2:	613b      	str	r3, [r7, #16]
   return(result);
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1e6      	bne.n	80039a8 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2220      	movs	r2, #32
 80039de:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80039e0:	bf00      	nop
 80039e2:	3724      	adds	r7, #36	@ 0x24
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b095      	sub	sp, #84	@ 0x54
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039fc:	e853 3f00 	ldrex	r3, [r3]
 8003a00:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	461a      	mov	r2, r3
 8003a10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a12:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a14:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a16:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a1a:	e841 2300 	strex	r3, r2, [r1]
 8003a1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1e6      	bne.n	80039f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	3308      	adds	r3, #8
 8003a2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	e853 3f00 	ldrex	r3, [r3]
 8003a34:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	f023 0301 	bic.w	r3, r3, #1
 8003a3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	3308      	adds	r3, #8
 8003a44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a48:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a4e:	e841 2300 	strex	r3, r2, [r1]
 8003a52:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1e5      	bne.n	8003a26 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d118      	bne.n	8003a94 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	e853 3f00 	ldrex	r3, [r3]
 8003a6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	f023 0310 	bic.w	r3, r3, #16
 8003a76:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a80:	61bb      	str	r3, [r7, #24]
 8003a82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a84:	6979      	ldr	r1, [r7, #20]
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	e841 2300 	strex	r3, r2, [r1]
 8003a8c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1e6      	bne.n	8003a62 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2220      	movs	r2, #32
 8003a98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003aa8:	bf00      	nop
 8003aaa:	3754      	adds	r7, #84	@ 0x54
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b09c      	sub	sp, #112	@ 0x70
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ac0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0320 	and.w	r3, r3, #32
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d171      	bne.n	8003bb4 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8003ad0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ad8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ade:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ae0:	e853 3f00 	ldrex	r3, [r3]
 8003ae4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003ae6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ae8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003aec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003aee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	461a      	mov	r2, r3
 8003af4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003af6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003af8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003afc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003afe:	e841 2300 	strex	r3, r2, [r1]
 8003b02:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1e6      	bne.n	8003ad8 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	3308      	adds	r3, #8
 8003b10:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b14:	e853 3f00 	ldrex	r3, [r3]
 8003b18:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b1c:	f023 0301 	bic.w	r3, r3, #1
 8003b20:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	3308      	adds	r3, #8
 8003b28:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003b2a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003b2c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b32:	e841 2300 	strex	r3, r2, [r1]
 8003b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1e5      	bne.n	8003b0a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	3308      	adds	r3, #8
 8003b44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b48:	e853 3f00 	ldrex	r3, [r3]
 8003b4c:	623b      	str	r3, [r7, #32]
   return(result);
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b54:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	3308      	adds	r3, #8
 8003b5c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003b5e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b66:	e841 2300 	strex	r3, r2, [r1]
 8003b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1e5      	bne.n	8003b3e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b74:	2220      	movs	r2, #32
 8003b76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d118      	bne.n	8003bb4 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	e853 3f00 	ldrex	r3, [r3]
 8003b8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f023 0310 	bic.w	r3, r3, #16
 8003b96:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ba0:	61fb      	str	r3, [r7, #28]
 8003ba2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba4:	69b9      	ldr	r1, [r7, #24]
 8003ba6:	69fa      	ldr	r2, [r7, #28]
 8003ba8:	e841 2300 	strex	r3, r2, [r1]
 8003bac:	617b      	str	r3, [r7, #20]
   return(result);
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1e6      	bne.n	8003b82 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d107      	bne.n	8003bd2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003bc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bc4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003bc8:	4619      	mov	r1, r3
 8003bca:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003bcc:	f7ff fa2a 	bl	8003024 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003bd0:	e002      	b.n	8003bd8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003bd2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003bd4:	f7fc ff74 	bl	8000ac0 <HAL_UART_RxCpltCallback>
}
 8003bd8:	bf00      	nop
 8003bda:	3770      	adds	r7, #112	@ 0x70
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bec:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d109      	bne.n	8003c10 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003c02:	085b      	lsrs	r3, r3, #1
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	4619      	mov	r1, r3
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f7ff fa0b 	bl	8003024 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003c0e:	e002      	b.n	8003c16 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f7ff f9f3 	bl	8002ffc <HAL_UART_RxHalfCpltCallback>
}
 8003c16:	bf00      	nop
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b086      	sub	sp, #24
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c2a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c30:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c38:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c44:	2b80      	cmp	r3, #128	@ 0x80
 8003c46:	d109      	bne.n	8003c5c <UART_DMAError+0x3e>
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	2b21      	cmp	r3, #33	@ 0x21
 8003c4c:	d106      	bne.n	8003c5c <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8003c56:	6978      	ldr	r0, [r7, #20]
 8003c58:	f7ff fea2 	bl	80039a0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c66:	2b40      	cmp	r3, #64	@ 0x40
 8003c68:	d109      	bne.n	8003c7e <UART_DMAError+0x60>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2b22      	cmp	r3, #34	@ 0x22
 8003c6e:	d106      	bne.n	8003c7e <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8003c78:	6978      	ldr	r0, [r7, #20]
 8003c7a:	f7ff feb7 	bl	80039ec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c84:	f043 0210 	orr.w	r2, r3, #16
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c8e:	6978      	ldr	r0, [r7, #20]
 8003c90:	f7ff f9be 	bl	8003010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c94:	bf00      	nop
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f7ff f9a8 	bl	8003010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cc0:	bf00      	nop
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b088      	sub	sp, #32
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	e853 3f00 	ldrex	r3, [r3]
 8003cdc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ce4:	61fb      	str	r3, [r7, #28]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	461a      	mov	r2, r3
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	61bb      	str	r3, [r7, #24]
 8003cf0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf2:	6979      	ldr	r1, [r7, #20]
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	e841 2300 	strex	r3, r2, [r1]
 8003cfa:	613b      	str	r3, [r7, #16]
   return(result);
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1e6      	bne.n	8003cd0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2220      	movs	r2, #32
 8003d06:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7ff f96a 	bl	8002fe8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d14:	bf00      	nop
 8003d16:	3720      	adds	r7, #32
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <memset>:
 8003d30:	4402      	add	r2, r0
 8003d32:	4603      	mov	r3, r0
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d100      	bne.n	8003d3a <memset+0xa>
 8003d38:	4770      	bx	lr
 8003d3a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d3e:	e7f9      	b.n	8003d34 <memset+0x4>

08003d40 <__libc_init_array>:
 8003d40:	b570      	push	{r4, r5, r6, lr}
 8003d42:	4d0d      	ldr	r5, [pc, #52]	@ (8003d78 <__libc_init_array+0x38>)
 8003d44:	4c0d      	ldr	r4, [pc, #52]	@ (8003d7c <__libc_init_array+0x3c>)
 8003d46:	1b64      	subs	r4, r4, r5
 8003d48:	10a4      	asrs	r4, r4, #2
 8003d4a:	2600      	movs	r6, #0
 8003d4c:	42a6      	cmp	r6, r4
 8003d4e:	d109      	bne.n	8003d64 <__libc_init_array+0x24>
 8003d50:	4d0b      	ldr	r5, [pc, #44]	@ (8003d80 <__libc_init_array+0x40>)
 8003d52:	4c0c      	ldr	r4, [pc, #48]	@ (8003d84 <__libc_init_array+0x44>)
 8003d54:	f000 f818 	bl	8003d88 <_init>
 8003d58:	1b64      	subs	r4, r4, r5
 8003d5a:	10a4      	asrs	r4, r4, #2
 8003d5c:	2600      	movs	r6, #0
 8003d5e:	42a6      	cmp	r6, r4
 8003d60:	d105      	bne.n	8003d6e <__libc_init_array+0x2e>
 8003d62:	bd70      	pop	{r4, r5, r6, pc}
 8003d64:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d68:	4798      	blx	r3
 8003d6a:	3601      	adds	r6, #1
 8003d6c:	e7ee      	b.n	8003d4c <__libc_init_array+0xc>
 8003d6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d72:	4798      	blx	r3
 8003d74:	3601      	adds	r6, #1
 8003d76:	e7f2      	b.n	8003d5e <__libc_init_array+0x1e>
 8003d78:	08003df0 	.word	0x08003df0
 8003d7c:	08003df0 	.word	0x08003df0
 8003d80:	08003df0 	.word	0x08003df0
 8003d84:	08003df4 	.word	0x08003df4

08003d88 <_init>:
 8003d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d8a:	bf00      	nop
 8003d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d8e:	bc08      	pop	{r3}
 8003d90:	469e      	mov	lr, r3
 8003d92:	4770      	bx	lr

08003d94 <_fini>:
 8003d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d96:	bf00      	nop
 8003d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d9a:	bc08      	pop	{r3}
 8003d9c:	469e      	mov	lr, r3
 8003d9e:	4770      	bx	lr
